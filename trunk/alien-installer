#!/bin/sh
#############################################################################
# alien-installer - a front-end script to install and configure AliEn
#############################################################################
#
# modification history
# $Log$
# Revision 1.21  2005/03/10 05:11:24  buncic
# Again
#
# Revision 1.20  2005/03/08 14:16:50  buncic
# Always use dialog from /opt/alien if it exists.
#
# Revision 1.19  2005/03/08 14:12:46  buncic
# Require dialog > 1.0 to process forms.
#
# Revision 1.18  2005/03/08 14:09:43  buncic
# Typo
#
# Revision 1.17  2005/03/08 13:52:50  buncic
# Check that alien-installer exists upin cvs checkout.
#
# Revision 1.16  2005/03/02 12:18:07  buncic
# Fixed CVS update problem
#
# Revision 1.15  2005/03/02 11:58:24  buncic
# Fixed rsync update.
#
# Revision 1.14  2005/03/02 11:50:37  buncic
# Popup error box if synchronisation fails.
#
# Revision 1.13  2005/03/02 11:41:04  buncic
# Added option to install specific AliEn release.
#
# Revision 1.12  2005/03/01 13:53:34  buncic
# Be quite.
#
# Revision 1.11  2005/03/01 13:46:50  buncic
# Redefine TPUT when redirecting output to file.
#
# Revision 1.10  2005/03/01 13:28:13  buncic
# Fixed cvs checkout.
#
# Revision 1.9  2005/03/01 12:12:50  buncic
# Add -d option to cvs update.
#
# Revision 1.8  2005/03/01 12:07:00  buncic
# Ditto.
#
# Revision 1.7  2005/03/01 12:02:57  buncic
# Fixed typo.
#
# Revision 1.6  2005/03/01 11:56:47  buncic
# Create anonymous cvs login if it does not exist.
#
# Revision 1.5  2005/03/01 05:52:10  buncic
# Fixed platform names.
#
# Revision 1.4  2005/03/01 04:47:02  buncic
# Checksums for i386 binary packages.
#
#
# SYNOPSIS
#
# DESCRIPTION
#
# AUTHOR:
# Predrag Buncic, e-mail: Predrag.Buncic@cern.ch
#
# CREATION DATE:
#C<
#############################################################################
VERSION=0.01
###########################################################################
[ -f $HOME/.alien/installer.rc ] && . $HOME/.alien/installer.rc
###########################################################################
ALIEN_INSTALLER_HOME=${ALIEN_INSTALLER_HOME:=$HOME/alien}
ALIEN_INSTALLER_URL=${ALIEN_INSTALLER_URL:=rsync://alien.cern.ch:8873/releases} 
ALIEN_INSTALLER_CVS=${ALIEN_INSTALLER_CVS:=":pserver:cvs@alisoft.cern.ch:/soft/cvsroot"}
ALIEN_INSTALLER_BINARY_UPDATE=${ALIEN_INSTALLER_BINARY_UPDATE:=0}
ALIEN_INSTALLER_PREFIX=${ALIEN_INSTALLER_PREFIX:=/opt/alien}
ALIEN_INSTALLER_METHOD=${ALIEN_INSTALLER_METHOD:=bininstall}
ALIEN_INSTALLER_AUTODETECT=${ALIEN_INSTALLER_AUTODETECT:=false}
ALIEN_INSTALLER_TYPE=${ALIEN_INSTALLER_TYPE:=all}
ALIEN_INSTALLER_PLATFORM=${ALIEN_INSTALLER_PLATFORM:=}
ALIEN_DIALOG=${ALIEN_DIALOG:=dialog}
ALIEN_RELEASE=${ALIEN_RELEASE:=HEAD}
ECHO=""
###########################################################################
InstallerRcUpdate()
###########################################################################
{
  mkdir -p $HOME/.alien
  (
    echo "ALIEN_INSTALLER_HOME=$ALIEN_INSTALLER_HOME" 
    echo "ALIEN_INSTALLER_URL=$ALIEN_INSTALLER_URL" 
    echo "ALIEN_INSTALLER_CVS=$ALIEN_INSTALLER_CVS" 
    echo "ALIEN_INSTALLER_BINARY_UPDATE=$ALIEN_INSTALLER_BINARY_UPDATE" 
    echo "ALIEN_INSTALLER_PREFIX=$ALIEN_INSTALLER_PREFIX" 
    echo "ALIEN_INSTALLER_METHOD=$ALIEN_INSTALLER_METHOD" 
    echo "ALIEN_INSTALLER_AUTODETECT=$ALIEN_INSTALLER_AUTODETECT" 
    echo "ALIEN_INSTALLER_TYPE=$ALIEN_INSTALLER_TYPE" 
    echo "ALIEN_INSTALLER_PLATFORM=$ALIEN_INSTALLER_PLATFORM" 
    echo "ALIEN_DIALOG=$ALIEN_DIALOG" 
    echo "ALIEN_RELEASE=$ALIEN_RELEASE" 
  ) > $HOME/.alien/installer.rc

}
###########################################################################
Exit()
###########################################################################
{
  clear
  InstallerRcUpdate
  exit $*
}

###########################################################################
Error()
###########################################################################
{
   dialog $style --msgbox "$1" $height $width 
   clear
   exit 1
}
###########################################################################
InstallerMake()
###########################################################################
{
  cmd=$1; shift 1
  if [ $# -eq 0 ]
  then
    $ECHO make -C $ALIEN_INSTALLER_HOME/meta/alien $cmd || Exit 1
  else
    list=$*
    for pkg in $list
    do
      dirs=`find $ALIEN_INSTALLER_HOME/apps -type d -mindepth 2 -maxdepth 2 -type d -path "$pkg"`
      for dir in $dirs 
      do
        if [ ! -d $dir ]
        then
          Error "No such package: $dir"
        fi
        $ECHO make -C $dir $cmd || Exit 1
      done
    done
  fi
}

###########################################################################
InstallerMakePkg()
###########################################################################
{
  cmd=$1; shift 1
  list=$*
  for dir in $list
  do
    if [ ! -d $dir ]
    then
      Error "No such package: $dir"
    fi
    $ECHO make -C $dir $cmd || Exit 1
  done
}

###########################################################################
InstallerSync()
###########################################################################
{
 (
  cd $ALIEN_INSTALLER_HOME
  if [ -d CVS -a -f alien-installer ]
  then
    if [ ! -f $HOME/.cvspass ]
    then 
     touch $HOME/.cvspass
    fi
    if [ `cat $HOME/.cvspass | grep -c $ALIEN_INSTALLER_CVS` -eq 0 ]
    then 
     echo "$ALIEN_INSTALLER_CVS Ah<Z" >> $HOME/.cvspass
    fi
    if [ "$ALIEN_RELEASE" = "HEAD" ]
    then
      cvs -d $ALIEN_INSTALLER_CVS update -dPA || Error "Error: CVS update failed ($ALIEN_RELEASE)."
    else
      cvs -d $ALIEN_INSTALLER_CVS update -dP -r $ALIEN_RELEASE || Error "Error:CVS update failed ($ALIEN_RELEASE)."
    fi
  else
    rsync -acvz --exclude=alien.conf.mk $ALIEN_INSTALLER_URL/$ALIEN_RELEASE/ . || Error "Error: rsync update failed." 
  fi
  ) > /dev/null 2>&1
}

###########################################################################
InstallerSetup()
###########################################################################
{
  height=8
  width=60
  style="--title AliEn-Configuratior-v0.01 --clear  --stdout"

  if [ -f $ALIEN_INSTALLER_PREFIX/bin/dialog ]
  then
     export LD_LIBRARY_PATH=$ALIEN_INSTALLER_PREFIX/lib:$LD_LIBRARY_PATH
     export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH
     dialog_form=$ALIEN_INSTALLER_PREFIX/bin/dialog
  else
     dialog_form=dialog
  fi

  eval `$ALIEN_INSTALLER_PREFIX/bin/alien configure` || Exit 1

  VARS="GLOBUS_LOCATION SWIG_LOCATION GSOAP_LOCATION CGSI_GSOAP_LOCATION CLASSAD_LOCATION MYPROXY_LOCATION"

  i=1
  form=""
  for var in $VARS
  do
    if [ "${!var}" != "" ]
    then
      form="$form $var  $i 1 ${!var}  $i 25 256 0"
      i=`expr $i + 1`
    else
      $ALIEN_DIALOG $style \
           --msgbox "Installation failed: $var undefined." $height $width
      Exit 1
    fi
  done

  arg1=`$dialog_form $style --form 'This is your curent AliEn environment. Please edit.' 20 50 0  $form | \
( 
  read GLOBUS_LOCATION 
  read SWIG_LOCATION 
  read GSOAP_LOCATION 
  read CGSI_GSOAP_LOCATION 
  read CLASSAD_LOCATION 
  read MYPROXY_LOCATION

  [ "$GLOBUS_LOCATION" != "" ] && \
                         arg=$arg" --globus-location $GLOBUS_LOCATION"
  [ "$SWIG_LOCATION" != "" ] && \
                         arg=$arg" --swig-location $SWIG_LOCATION"
  [ "$GSOAP_LOCATION" != "" ] && \
                         arg=$arg" --gsoap-location $GSOAP_LOCATION"
  [ "$CGSI_GSOAP_LOCATION" != "" ] && \
                         arg=$arg" --cgsi-gsoap-location $CGSI_GSOAP_LOCATION"
  [ "$CLASSAD_LOCATION" != "" ] && \
                         arg=$arg" --classad-location $CLASSAD_LOCATION"
  [ "$MYPROXY_LOCATION" != "" ] && \
                         arg=$arg" --myproxy-location $MYPROXY_LOCATION"

  echo $arg 
)`

  ALIEN_ORGANISATION=${ALIEN_ORGANISATION:=Alice}
  ALIEN_USER=${ALIEN_USER:=${USER}}
  ALIEN_PROMPT=${ALIEN_PROMPT:=alien}
  ALIEN_LDAP_DN=${ALIEN_LDAP_DN:=auto}
  ALIEN_MYPROXY_SERVER=${ALIEN_MYPROXY_SERVER:=none}
  ALIEN_MYPROXY_DOMAIN=${ALIEN_MYPROXY_DOMAIN:=none}

  VARS="ALIEN_ORGANISATION ALIEN_USER ALIEN_PROMPT ALIEN_LDAP_DN ALIEN_MYPROXY_SERVER ALIEN_MYPROXY_DOMAIN"

  i=1
  form=""
  for var in $VARS
  do
    if [ "${!var}" != "" ]
    then
      form="$form $var  $i  1 ${!var}   $i 25 25 0"
    else
      form="$form $var  $i  1 \"\"  $i 25 25 0"
    fi
    i=`expr $i + 1`
  done

  arg2=`$dialog_form $style --form 'This is your curent AliEn configuration. Please edit.' 20 50 0  $form | \
( 
  read ALIEN_ORGANISATION 
  read ALIEN_USER 
  read ALIEN_PROMPT 
  read ALIEN_LDAP_DN 
  read ALIEN_MYPROXY_SERVER 
  read ALIEN_MYPROXY_DOMAIN

  [ "$ALIEN_USER" != "" ] && \
                         arg=$arg" --user $ALIEN_USER"
  [ "$ALIEN_ORGANISATION" != "" ] && \
                         arg=$arg" --VO $ALIEN_ORGANISATION"
  [ "$ALIEN_PROMPT" != "" ] && \
                         arg=$arg" --prompt $ALIEN_PROMPT"
  [ "$ALIEN_LDAP_DN" != "" -a "$ALIEN_LDAP_DN" != "auto"] && \
                         arg=$arg" --ldap-dn $ALIEN_LDAP_DN"
  [ "$ALIEN_MYPROXY_SERVER" != "" -a "$ALIEN_MYPROXY_SERVER" != "none" ] && \
                         arg=$arg" --myproxy-server $ALIEN_MYPROXY_SERVER"
  [ "$ALIEN_MYPROXY_DOMAIN" != "" -a "$ALIEN_MYPROXY_DOMAIN" != "none" ] && \
                         arg=$arg" --myproxy-domain $ALIEN_MYPROXY_DOMAIN"

  echo $arg
)` 

  $ALIEN_INSTALLER_PREFIX/bin/alien configure $arg1 $arg2 

  if [ $? -eq 1 ]
  then
    $ALIEN_DIALOG $style \
          --msgbox 'Configuration failed: Please check the log file.' $height $width
    $ALIEN_DIALOG $style \
          --textbox install.log 0 0  
    Exit 
  else
    $ALIEN_DIALOG $style --sleep 3 \
              --infobox 'You have sucessfuly installed and configured  AliEn gridware on your computer. Enjoy!' $height $width  
 
    Exit
  fi
  
}

###########################################################################
InstallerCount()
###########################################################################
{
  grep -e NONE
}

###########################################################################
InstallerUpdate()
###########################################################################
{
  InstallerSync

  export GARAUTODETECT=$ALIEN_INSTALLER_AUTODETECT
  export TPUT=undef

  for meta in $ALIEN_INSTALLER_TYPE
  do
    pkgdir=`echo $meta | sed 's/"//g'`
    if [ -d $ALIEN_INSTALLER_HOME/meta/$pkgdir ]
    then
      packages=`cd $ALIEN_INSTALLER_HOME/meta/$pkgdir; make list_packages`
      npkgs=`echo $packages | wc -w`
      cd $ALIEN_INSTALLER_HOME
      i=0
      for pkg in $packages
      do
        g=$[$[i * 100]/$[npkgs + 1]];
        i=$[i + 1]
        echo "Updating $pkg..."
        InstallerMakePkg $ALIEN_INSTALLER_METHOD $pkg 
      done
    fi 
  done

  if [ -x  $ALIEN_INSTALLER_PREFIX/bin/alien-perl ]
  then
    echo 'Running post installation scripts...'
    $ALIEN_INSTALLER_PREFIX/bin/alien-perl --bootstrap --prefix $ALIEN_INSTALLER_PREFIX
  else
    echo 'Installation failed: alien-perl not found.' 
  fi

  $ALIEN_INSTALLER_PREFIX/bin/alien configure >> install.log

  if [ $? -ne 0 ]
  then
    echo 'Update failed: Configuration problem.' 
    Exit 1
  fi
}


###########################################################################
InstallerUI()
###########################################################################
{
  height=8
  width=60
  cmd="./alien-installer "

  export TPUT=undef

  style="--title AliEn-Installer-v0.01 --clear  --stdout"

  release_file=`mktemp /tmp/release.XXXXXX`

  wget -O $release_file http://alien.cern.ch/Releases > /dev/null 2>&1 

  list=`grep -v -e HEAD -e "^#" $release_file |  awk -F: '{printf("%s %s 0 ",$1,$2)}'`

  release=`$ALIEN_DIALOG $style \
            --radiolist "PLEASE SELECT ALIEN RELEASE:" 0 0 0 \
                        "HEAD" "Curent CVS HEAD (Warning: use at own risk!)" on \
                        $list` || Exit 1

  ALIEN_RELEASE=$release

  method=`$ALIEN_DIALOG  $style \
          --radiolist "PLEASE SELECT THE INSTALLATION METHOD"  0 0 0 \
                      "Binary" "Download precompiled packages"   on  \
                      "Source" "Compile everything from sources" 0` || Exit 1

  if [ "$method" == "Source" ]
  then
    cmd=$cmd"-b "
    ALIEN_INSTALLER_METHOD='install'
  fi

  $ALIEN_DIALOG  $style --defaultno \
          --yesno "Would you like installer to autodetect and reuse already installed software components on your system?" 0 0 

  if [ $? -eq 0 ] 
  then
    ALIEN_INSTALLER_AUTODETECT="true"
  fi

  export GARAUTODETECT=$ALIEN_INSTALLER_AUTODETECT

  workspace=$ALIEN_INSTALLER_HOME

  $ALIEN_DIALOG  $style \
          --yesno "Default workspace location for this installation is $workspace. Press YES if you want to keep it that way or press NO if you want to pick another location." 0 0 

  if [ $? -eq 1 ]
  then
    workspace=`$ALIEN_DIALOG $style \
               --inputbox 'Please enter workspace directory:' $height $width \
               $workspace` || Exit 1
  fi

  mkdir -p $workspace || ( Error "You must specify the workspace directory.") 

  ALIEN_INSTALLER_HOME=$workspace

  cd $workspace || ( Error  "Cannot change directory to $workspace" )

  cmd=$cmd" -p $workspace "

  $ALIEN_DIALOG $style --sleep 3 \
                --infobox 'Synchronizing with the server.' $height $width

  InstallerSync

  cmd=$cmd"configure "

  platform=$ALIEN_INSTALLER_PLATFORM

  if [ "$method" == "Binary" ]
  then
    if [ "$ALIEN_INSTALLER_PLATFORM" == "" ]
    then 

      p=`$workspace/config.guess`

      case $p in
        i*86-*-linux-gnu)
          platform=i686-pc-linux-gnu
          ;;
        x86_64-*-linux-gnu)
          platform=i686-pc-linux-gnu
          ;;
        powerpc-apple-darwin7.*)
          platform=powerpc-apple-darwin7.7.0
          ;;
        ia64-*-linux-gnu)
          platform=ia64-unknown-linux-gnu
          ;;
         *)
          Error "Unknown or unsupported platform: $platform"
          ;;
      esac

    fi

    $ALIEN_DIALOG  $style \
            --yesno "Detected/configured platform setting for this machine is $platform. Press YES if you want to keep it that way or press NO if you want to select another supported platform." 0 0

    if [ $? -eq 1 ] 
    then 
       platform=`$ALIEN_DIALOG $style \
                  --radiolist 'PLEASE SELECT PLATFORM:' 0 0 0 \
                              'i686-pc-linux-gnu'         'Linux i686' on \
                              'ia64-unknown-linux-gnu'    'Linux ia64' 0  \
                              'powerpc-apple-darwin7.7.0' 'MacOS X'    0` || Exit 1 

      cmd=$cmd"--with-platform=$platform "
    fi
  fi

  ALIEN_INSTALLER_PLATFORM=$platform  

  prefix=$ALIEN_INSTALLER_PREFIX

  $ALIEN_DIALOG $style \
         --yesno "Default installation location location is $prefix. Press YES if you want to keep it that way or press NO if you want to select another location." $height $width

  if [ $? -eq 1 ]
  then
     prefix=`$ALIEN_DIALOG $style \
                    --inputbox 'Please specify installation directory'  $height $width \
                     $prefix` || Exit 1
  fi

  if [ -d $prefix ]
  then
    $ALIEN_DIALOG  $style \
            --yesno "Directory $prefix already exist. Press YES if you want to overwrite existing files, press NO if you want cancel the installation." 0 0 || Exit 1
  fi 

  ALIEN_INSTALLER_PREFIX=$prefix

  [ -d $prefix ] &&  rm -rf $prefix/*  

  mkdir -p $prefix

  cmd=$cmd"--prefix=$prefix"

  list=`$ALIEN_DIALOG $style \
               --radiolist 'PLEASE SELECT THE INSTALLATION TYPE' 0 0 0  \
                           'all'    'All packages'            on \
                           'client' 'Client'                  0  \
                           'portal' 'Portal'                  0  \
                           'site'   'Site CE/SE services'     0  \
                           'core'   'Core VO services'        0  \
                           'wn'     'Worker node'             0` || Exit 1

  ALIEN_INSTALLER_TYPE="$list"
  
  $ALIEN_DIALOG $style --sleep 3 \
              --infobox 'Configuring...' $height $width
 
  echo $cmd > install.log

  (autoconf; $cmd ) > install.log 2>&1

  for meta in $list
  do
    pkgdir=`echo $meta | sed 's/"//g'`
    $ALIEN_DIALOG $style --sleep 3 \
                  --infobox "Getting the list of packages to install for $pkgdir..." $height $width
    if [ -d $workspace/meta/$pkgdir ]
    then
      packages=`cd $workspace/meta/$pkgdir; make list_packages`
      npkgs=`echo $packages | wc -w`
      cd $workspace
      i=0
      for pkg in $packages
      do
        g=$[$[i * 100]/$[npkgs + 1]];
        i=$[i + 1]
        echo XXX
        echo "Installing $pkg..."
        echo XXX
        InstallerMakePkg clean $pkg >> install.log
        InstallerMakePkg $ALIEN_INSTALLER_METHOD $pkg >> install.log
        echo $g
      done | $ALIEN_DIALOG $style --gauge "Installing $pkg..."  $height $width
    fi 
  done

  if [ -x $prefix/bin/alien-perl ]
  then
    $ALIEN_DIALOG $style --sleep 3 \
                  --infobox 'Running post installation scripts...' $height $width
    $prefix/bin/alien-perl --bootstrap --prefix $prefix
 
    $ALIEN_DIALOG $style --sleep 3 \
                --infobox 'Done.' $height $width
  else
    $ALIEN_DIALOG $style \
            --msgbox 'Installation failed: alien-perl not found.' $height $width
    $ALIEN_DIALOG $style \
          --textbox install.log 0 0  
    Exit 
  fi

  InstallerSetup

}

###########################################################################
###########################################################################

mkdir -p $ALIEN_INSTALLER_HOME || Exit 1

args=$*
 
while [ $# -gt 0 ]
do
    case $1 in
        selfupdate|sync)
            InstallerSync 
            name=`echo $0 | sed 's%./%%'`
            exec $ALIEN_INSTALLER_HOME/alien-installer --copy $0
           ;;
        --copy)
            shift 1
            cp -f $0 $1
	    exit
           ;;
        -u|--url)
            shift 1
	    ALIEN_INSTALLER_URL=$1
            shift 1
           ;;
        -r|--release)
            shift 1
	    ALIEN_RELEASE=$1
            shift 1
           ;;
        -b|--binary)
            shift 1
	    ALIEN_INSTALLER_BINARY_UPDATE=1
           ;;
        --pretend)
            shift 1
	    ECHO=echo
           ;;
        -p|--build-prefix)
            shift 1
	    ALIEN_INSTALLER_HOME=$1
            shift 1
            mkdir -p $ALIEN_INSTALLER_HOME || exit 1
           ;;
        update|update-all)
            shift 1
	    InstallerUpdate $*
            exit
           ;;
        make)
            shift 1
            InstallerMake $*
            exit
           ;;
        test)
            shift 1
            InstallerMake test $*
            exit
           ;;
        makepkg)
            shift 1
            InstallerMakePkg $*
            exit
           ;;
        remove)
            shift 1
            InstallerMake buildclean $*
            exit
           ;;
        purge)
            shift 1
            InstallerMake clean $*
            exit
           ;;
        install)
           shift 1
           case $ALIEN_INSTALLER_BINARY_UPDATE in
             1|true|TRUE|True|yes|Yes|YES|Y)
               InstallerMake bininstall $*
               ;;
             *)
               InstallerMake install $*
               ;;
           esac
           exit
           ;;
        configure)
            shift 1
            InstallerRcUpdate
            cd $ALIEN_INSTALLER_HOME && autoconf && ./configure $*
            exit
           ;;
        setup)
            shift 1
            InstallerSetup $*
            exit
           ;;
        -q)
           shift 1
	   QUIET=1
           ;;
        -v|--trace)
           shift 1
           set -vx
           ;;
        -V)
           print $VERSION
           exit
           ;; 
        -y)
           shift 1
           YES=1
           ;;
        --help|-help|-h)
            cat<<EOF

Usage: alien-installer [options] command [package...]

Common commmands:
  install    - install/update the named packages
  remove     - remove the named packages
  purge      - same as remove but also removes all configuration files
  update     - update the named packages
  sync       - upgrade to the latest release
  update-all - update all installed packages
  configure  - rerun the configuration process
  list       - list available packages, optionally filtering by name,
  apropos    - list packages matching a search keyword
  describe   - display a detailed description of the named packages
  index      - force rebuild of package cache 
Options:
  -b, --binary       - use binary packages 
  -p, --build-prefix - installation directory
  -u, --url          - cache url         
  -h, --help         - display this help text
  -q, --quiet        -  be less verbose, opposite of --verbose
  -V, --version      - display version information
  -v, --verbose      - to be more verbose, opposite of --quiet
EOF
            exit
           ;;
        list|apropos|index|describe)
            shift 1
            echo "Sorry, not implemented (yet)..."
            exit 1
           ;;
        *)
           shift 1
           ;;
    esac
done

InstallerUI $*
