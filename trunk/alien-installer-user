#!/bin/bash

TMPFILE=/tmp/.alien_installer.$$

trap 'INTERRUPT' 2

INTERRUPT()
{
disown 	$PROGRESS >/dev/null 2>&1
kill 	$PROGRESS >/dev/null 2>&1
echo ""
echo "   Installation cancelled"

if [ "$ERROR" = '' ]; then  
	exit -1
else
	exit $ERROR
fi
}

PARSEARGUMENTS()
{
while [ $# -gt 0 ]
	do
	case $1 in 
	-help|--help|-h)
		PRINTOPTIONS
		exit 0
	;;
	-help-more|--help-more)
		ALIEN_ADVANCED_OPTIONS=1
		PRINTOPTIONS
		exit 0
	;;
	-install-dir|--install-dir)
		shift 1
		ALIEN_USER_DIR=$1
	;;
	-restart|--restart)
		ALIEN_RESTART=1
	;;
	-type|--type)
		shift 1
		ALIEN_TYPE=$1
	;;
	-torrent|--torrent)
		ALIEN_TORRENT=1
	;;
	-version|--version)
		shift 1
		ALIEN_VERSION=$1
	;;
	-platform|--platform)
		shift 1
		ALIEN_INSTALLER_PLATFORM=$1
	;;
	--arch|-arch|--architecture|-architecture)
		shift 1
		ALIEN_INSTALLER_ARCH=$1
	;;
	-skip_rc|--skip_rc)
		ALIEN_SKIP_RC=1;
	;;
	-batch|--batch)
		ALIEN_INSTALLER_BATCH=1
	;;
	-verbose|--verbose)
		ALIEN_INSTALLER_VERBOSE=1
	;;
	*) echo "Invalid argument: '$*'. Please use: '$0 -help' for the list of available options"
		exit -1
	esac
	shift 1
done
}

PRINTOPTIONS()
{
echo "
Usage: $0 [arguments] Makes an automatic installation of the services
  -install-dir <path> 	Specify the installation directory (default is $HOME/alien)
  -type <type>       	Specify the AliEn type of installation (default is user) [ ${ALIEN_TYPES[*]} ]
  -help                 Prints a list of options available (prints this message)
"
if [ "$ALIEN_ADVANCED_OPTIONS" = 1 ]; then
  echo "Advanced options: Users are NOT recommended to use them unless they know what they are doing
  -restart           	Restart the services after the installation has finished
  -version <version> 	Install a specific version (default is v2-17) [ ${ALIEN_VERSIONS[*]} ]
  -platform <type>	Specify the platform to install (default is $(uname -s)) [ ${ALIEN_PLATFORM_TYPES[*]} ]
  -arch <type>		Specify the architecture to install (default is $(uname -m)) [${ALIEN_ARCH_TYPES[*]} ]
  -torrent		Perform installation through a torrent client
  -skip_rc           	Do not read the file $HOME/.alien/installer.rc for default values
  -batch             	Run in batch mode (do not wait 10 seconds)
  -verbose		Print more detailed installation information
"
fi
}

PRINTDOTS()
{
while [ true ];
do
	echo -n "."
	sleep 1
done
}

GETDOWNLOADCLIENT()
{
which wget >/dev/null 2>&1
if [ $? -eq 0 ]; then
    ALIEN_INSTALLER_WGET=1
    PRINTVERBOSE "wget will be used for downloads."
else
    which curl >/dev/null 2>&1
    if [ $? -eq 0 ]; then
	ALIEN_INSTALLER_CURL=1
	PRINTVERBOSE "curl will be used for downloads"
    else
	echo "   curl or wget were not found on your system."
	echo "   Installation cancelled!"
	exit -2
    fi
fi
}

PRINTVERBOSE()
{
if [ "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then
	echo "---> $1"
fi
}

FINDTYPE()
{
if [ "$ALIEN_TYPE" = "" ]; then 
	ALIEN_TYPE=user
	PRINTVERBOSE "Default installation type: $ALIEN_TYPE"	
else
	for index in ${ALIEN_TYPES[*]};
	do if [[ $index == $ALIEN_TYPE ]]; then
		PRINTVERBOSE "User specified valid installation type: $ALIEN_TYPE"
		ALIEN_TYPE_FOUND=1
	fi
	done
	
	if [ ! "$ALIEN_TYPE_FOUND" = 1 ]; then
		echo "   Invalid type of installation was specified"
		echo "   Please use one of the following installation types: ${ALIEN_TYPES[*]}"
		exit -1
	fi
fi
}

CHECKPREINSTALL()
{
if  [ "$ALIEN_SKIP_RC" = "" ]; then
	[ -f   $HOME/.alien/installer.rc ] &&   source $HOME/.alien/installer.rc
fi

if [  -f $HOME/.alien/installer.rc ]; then
	echo -n "   Found $HOME/.alien/installer.rc. Delete the file? (default: Y - Highly recommended) [Y/n]"  
	read alien_rc_delete
	case "$alien_rc_delete" in
	y|Y)
		rm $HOME/.alien/installer.rc
		echo "   File installer.rc removed"
	;;
	n|N)
		echo "   File not removed"
	;;
	"")
		rm $HOME/.alien/installer.rc
		echo "   File installer.rc removed"
	;;
	*) 
		echo "Invalid answer. Installation cancelled."
		exit -1
	esac
fi

if [  -d $HOME/.alien/cache ]; then 
	echo -n "   Found $HOME/.alien/cache/ directory. Delete the directory? (default: Y - Highly recommended) [Y/n]"
	read alien_cache_delete
	case "$alien_cache_delete" in
	y|Y)
		rm -r $HOME/.alien/cache
		echo "   Directory $HOME/.alien/cache removed"
	;;
	n|N)
		echo "   Directory not removed"
	;;
	"")
		rm -r $HOME/.alien/cache
		echo "   Directory $HOME/.alien/cache removed"
	;;
	*) 
		echo "   Invalid answer. Installation cancelled."
		exit -1
	esac
fi
}

SETINSTALLDIR()
{
ALIEN_USER_DIR=$(cd $ALIEN_USER_DIR && pwd)
ALIEN_INSTALL_DIR=$(cd $ALIEN_USER_DIR/../ && pwd)
ALIEN_INSTALL_DIR="$ALIEN_INSTALL_DIR/alien"
}

FINDUSERDIR()
{
ALIEN_INSTALLER_HOME=${ALIEN_INSTALLER_HOME=$HOME/.alien/cache}

if [ "$ALIEN_USER_DIR" = '' ]; then
	ALIEN_INSTALL_DIR=${ALIEN_INSTALL_DIR=$HOME/alien}
	ALIEN_USER_DIR=${ALIEN_INSTALL_DIR}
	echo "   Installing in the default directory: $ALIEN_USER_DIR"
	echo "   If you wish to install in a specific directory do: ./alien-installer -install-dir <path>"
else
	if [ ! "${ALIEN_USER_DIR:0:1}" = "/"  ]; then
		ALIEN_USER_DIR="$(pwd)/$ALIEN_USER_DIR"
	fi

	if [ ! -d "$ALIEN_USER_DIR" ]; then
		mkdir $ALIEN_USER_DIR
		if [ ! $? = 0 ]; then
			echo "   Failed to create user directory. Please check you have correct permissions."
			exit -2
		else
			PRINTVERBOSE "$ALIEN_USER_DIR created successfully"
		fi
		SETINSTALLDIR
		rm -rf "$ALIEN_USER_DIR"
	else
		if [ "$ALIEN_INSTALLER_BATCH" = '' ]; then
			echo -n "   $ALIEN_USER_DIR already exists. Do you wish to use it anyway? default: n [Y/n]"
			read alien_overwrite_install
			case "$alien_overwrite_install" in
			y|Y)
	    			PRINTVERBOSE "Reusing $ALIEN_USER_DIR"
	    			SETINSTALLDIR
			;;
			n|N)
	    			echo "   Please specify another installation directory."
				exit -2
			;;
			"")
	    		echo "   Please specify another installation directory."
			exit -2
	    		;;
			*) 
	    		echo "   Invalid answer. Installation cancelled."
			exit -2
			esac
		else
			PRINTVERBOSE "Reusing $ALIEN_USER_DIR"
			SETINSTALLDIR
		fi
	fi

	echo "   Installing in the user specified directory: $ALIEN_USER_DIR"
fi

PRINTVERBOSE "AliEn installation directory prefix: $ALIEN_INSTALL_DIR"
}

FINDPLATFORM()
{
if [ "$ALIEN_INSTALLER_PLATFORM" = '' ]; then 
	ALIEN_INSTALLER_PLATFORM=$(uname -s)
fi

if [ "$ALIEN_INSTALLER_ARCH" = '' ]; then 
	ALIEN_INSTALLER_ARCH=$(uname -m)
        if [ "$ALIEN_INSTALLER_PLATFORM" = "Darwin" ]; then
    	    sysctl machdep.cpu.extfeatures | grep "64" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                ALIEN_INSTALLER_ARCH=x86_64
            else
                ALIEN_INSTALLER_ARCH=i686
            fi
	fi
fi

PRINTVERBOSE "Platform determined as: $ALIEN_INSTALLER_PLATFORM"
PRINTVERBOSE "Architecture determined as: $ALIEN_INSTALLER_ARCH"

if [ "$ALIEN_INSTALLER_PLATFORM" = "Linux" ]; then
		case "$ALIEN_INSTALLER_ARCH" in	
			i686) ALIEN_INSTALLER_PLATFORM=i686-pc-linux-gnu ;; 
			ia64) ALIEN_INSTALLER_PLATFORM=ia64-unknown-linux-gnu ;; 
			x86_64) ALIEN_INSTALLER_PLATFORM=x86_64-unknown-linux-gnu ;;
			*) 	
			echo "   Invalid architecture was specified"
			echo "   Please use one of the following available architectures: ${ALIEN_ARCH_TYPES[*]}"
			exit -1 ;;
		esac

elif [ "$ALIEN_INSTALLER_PLATFORM" = "Darwin" ]; then
		case "$ALIEN_INSTALLER_ARCH" in
			i386) ALIEN_INSTALLER_PLATFORM=i686-apple-darwin8.6.1 ;;
			i686) ALIEN_INSTALLER_PLATFORM=i686-apple-darwin8.6.1 ;;
			x86_64) ALIEN_INSTALLER_PLATFORM=x86_64-apple-darwin8.6.1 ;;
			*)
			echo "   Invalid platform was specified"
			echo "   Please use one of the following available platforms: ${ALIEN_PLATFORM_TYPES[*]}"
			exit -1
		esac
fi

echo "   Platform set as: $ALIEN_INSTALLER_PLATFORM"
}

FINDVERSION()
{
if [ "$ALIEN_VERSION" == '' ]; then 
	releases="http://alienbuild.cern.ch:8888/Releases"

	if [ "$ALIEN_INSTALLER_WGET" = 1 ]; then
	     wget $releases  -O $TMPFILE 2> /dev/null
	elif [ "$ALIEN_INSTALLER_CURL" = 1 ]; then
	    curl "$releases" -o $TMPFILE 2> /dev/null
	fi
	
	if  [ $? != 0 ];
	then 
		echo "   Error getting file $releases"
		exit -2
	fi

	ALIEN_VERSION=`grep 'Stable' $TMPFILE | head -n 1 | awk '{print $5'}`
	rm $TMPFILE

	if [ "$ALIEN_VERSION" = "" ];
	then 
		echo "   Error getting AliEn version from $releases"
		exit -2
	fi
else
	for index in ${ALIEN_VERSIONS[*]};
	do if [[ $index == $ALIEN_VERSION ]];
	then
	    PRINTVERBOSE "User specified a valid version: $ALIEN_VERSION"
	    ALIEN_VERSION_FOUND=1
	fi
	done
	
	if [ ! "$ALIEN_VERSION_FOUND" = 1 ];
	then
		echo "   Invalid version was specified"
		echo "   Please use one of the following available versions: ${ALIEN_VERSIONS[*]}"
		exit -1
	fi
fi
PRINTVERBOSE "Installing version $ALIEN_VERSION"
}

FINDRELEASES()
{
releases="http://alienbuild.cern.ch:8888/BitServers"

if [ "$ALIEN_INSTALLER_WGET" = 1 ]; then
    wget $releases  -O $TMPFILE 2> /dev/null 
elif [ "$ALIEN_INSTALLER_CURL" = 1 ]; then
    curl "$releases" -o $TMPFILE 2> /dev/null
fi

if  [ $? != 0 ]; then 
	echo "   Error getting file $releases"
	exit -2
fi

ALIEN_BITS_URL=`grep $ALIEN_INSTALLER_PLATFORM  $TMPFILE | awk '{print $3'}`
ALIEN_BITS_URL="$ALIEN_BITS_URL/$ALIEN_INSTALLER_PLATFORM/$ALIEN_VERSION/download/"
  
if [ "$ALIEN_BITS_URL" = "" ]; then 
	echo "   Error getting bits url $releases"
	cat $TMPFILE
	rm $TMPFILE
	exit -2
fi

rm $TMPFILE
}

FINDCURRENTVERSION()
{
PRINTVERBOSE "Checking for an existing installation of AliEn"

if [ "$ALIEN_INSTALLER_WGET" = 1 ]; then
    wget -q  $ALIEN_BITS_URL/../../../../CompiledReleases -O CompiledReleases 
elif [ "$ALIEN_INSTALLER_CURL" = 1 ]; then
    curl "$ALIEN_BITS_URL/../../../../CompiledReleases" -o CompiledReleases 2> /dev/null
fi

if [ $? != 0 ]; then
	echo "    Error getting file $ALIEN_BITS_URL/../../../../CompiledReleases"
	exit -2
fi

ALIEN_MINOR_VERSION=`cat CompiledReleases |grep $ALIEN_VERSION| awk  '{print \$3}'`
rm CompiledReleases

VERSION=`alien -version 2>&1  |grep "Version:" |awk -F "Version: " '{print $2}'`

if [ "$VERSION" = '' ]; then
	PRINTVERBOSE "Trying with the default location for alien: $HOME/alien/bin/alien"
	VERSION=`$HOME/alien/bin/alien -version 2>&1  |grep "Version:" |awk -F "Version: " '{print $2}'`
fi
  
if [ "$VERSION" = '' ]; then
	PRINTVERBOSE "No version was found. Installing new version."
	return 0
fi
echo "   Checking the version that we will install (if it is newer than '$VERSION')"

if [ "$VERSION"  = "$ALIEN_VERSION.$ALIEN_MINOR_VERSION" ]; then
	echo "   You have the latest version installed ($VERSION). No installation is needed."

	if  [ "$ALIEN_RESTART" = "" ];
	then
		exit 0
	fi

	echo "   Exiting with error because we were supposed to restart"
  
fi
PRINTVERBOSE "Ready to install $ALIEN_VERSION.$ALIEN_MINOR_VERSION"
}

DOWNLOADNORMAL()
{
if [ "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then
	echo -n "---> Downloading $FILE"
else
	echo -n "   Downloading $ALIEN_TYPE distribution"
fi

PRINTDOTS & 
PROGRESS=$!

if [ "$ALIEN_INSTALLER_WGET" = 1 ]; then
    wget -nv "$FILE" -O alien.tar.gz > /dev/null 2>&1 
elif [ "$ALIEN_INSTALLER_CURL" = 1 ]; then
    curl "$FILE" -o alien.tar.gz > /dev/null 2>&1
fi

disown $PROGRESS >/dev/null 2>&1
kill $PROGRESS >/dev/null 2>&1
echo "Done"

if [ "$?" != 0 ];
then
  echo "   Error getting $FILE!"
  rm -rf  $ALIEN_INSTALL_DIR
  exit -2
fi

# Unpack AliEn distribution tarball
echo -n "   Extracting the files"

PRINTDOTS & 
PROGRESS=$!

tar jxf alien.tar.gz

disown $PROGRESS 
kill $PROGRESS >/dev/null 2>&1
echo "Done"
}

DOWNLOADTORRENT()
{
ARCH=`uname -m`

TCLIENT="torrent_client_$ARCH.tar.bz2"
WWWROOT="http://alitorrent.cern.ch"


if [ "$ALIEN_INSTALLER_WGET" = 1 ]; then
    wget "$WWWROOT/torrent_client/$TCLIENT" -O "$TCLIENT" || exit 1
elif [ "$ALIEN_INSTALLER_CURL" = 1 ]; then
    curl "$WWWROOT/torrent_clien/$TCLIENT" -o $TCLIENT || exit 1
fi

bzip2 -c -d "$TCLIENT" | tar -x || exit 2
echo "Getting the torrent"

FULLNAME="alien-$ALIEN_VERSION-$ALIEN_TYPE-$ARCH.tar.bz2"
TFILE="$WWWROOT/torrents/$FULLNAME.torrent"

torrent_client_$ARCH/download "$TFILE" -d torrent_source || exit 2
echo "   Seeding the torrent"
torrent_client_$ARCH/seed "$TFILE" -d torrent_source

if [ "$?" != 0 ];
then
  echo "Error getting $FILE!"
  rm -rf  $ALIEN_INSTALL_DIR
  exit -2
fi

# Unpack AliEn distribution tarball
echo -n "   Extracting the files"

PRINTDOTS & 
PROGRESS=$!

tar jxf torrent_source/*/*.tar.bz2

disown $PROGRESS 
kill $PROGRESS >/dev/null 2>&1
echo "Done"
}

RELOCATE()
{
prefix=$ALIEN_USER_DIR
build_prefix=/opt/alien

# Relocate if the installation directory is not /opt/alien
if [ "$prefix" != "$build_prefix" ]; 
then
	if [ "$ALIEN_TYPE" != "user" ]; then
		
		PRINTVERBOSE "Relocating perl"
		config=`find $prefix/lib/perl5 -name Config.pm -exec grep -l "This file was created by configpm" {} \;`
		if [ "$config" = "" ] ; then
			PRINTVERBOSE "Couldn't find Config.pm in $prefix/lib/perl5!"
			ERROR=-2
			INTERRUPT
		fi     
		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix%$prefix%sg; s%$build_prefix %$prefix %sg " $config
		config=`find $prefix/lib/perl5 -path "*/CORE/config.h"`

		if [ "$config" = "" ] ; then
			PRINTVERBOSE "Couldn't find CORE/config.h in $prefix/lib/perl5!"  
			ERROR=-2
			INTERRUPT
		fi

		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix %$prefix %sg; s%\"$build_prefix\"%\"$prefix\"%sg; " $config
		for file in `find $prefix/lib/perl5 -name .packlist`
		do
			perl -pi -e "s%$build_prefix/%$prefix/%g" $file
		done

		PRINTVERBOSE "Relocating globus"
		if [ -f $prefix/globus/setup/globus/setup-globus-common ]; then
			env GLOBUS_LOCATION=$prefix/globus GPT_LOCATION=$prefix/globus PERL5LIB="$prefix/globus/lib/perl5:$prefix/lib/perl5" $prefix/bin/perl $prefix/globus/setup/globus/setup-globus-common.pl
		fi 

		PRINTVERBOSE "Relocating alien-perl"
		if [ -f $prefix/bin/alien-perl ]; then
			$prefix/bin/alien-perl --bootstrap --prefix $prefix
		fi 
	fi
  
	for p in curl-config gpg-error-config libgcrypt-config libgnutls-config libgnutls-extra-config uuid-config xml2-config freetype-config pkg-config
	do
	if [ -f $prefix/bin/$p ] ; then
		PRINTVERBOSE "Relocating $p"
		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix%$prefix%sg; s%$build_prefix %$prefix %sg " $prefix/bin/$p
	fi
	done

	PRINTVERBOSE "Relocating gapi"
	(cd $prefix/api/bin; ./alien_apiservice-bootstrap)
	PRINTVERBOSE "Relocation for gapi complete"
fi    
}

SERVICERESTART()
{
if [ "$ALIEN_RESTART" = 1 ];
then
    NOHUP=`which nohup 2> /dev/null`
    echo "   Let's restart the services (with $NOHUP)"
    echo "   This very first time, we have to kill everything"
#    (cd; sleep 15; kill ` ps -ef |grep alien |grep -v grep |grep -v $$ |awk '{print \$2}'`;kill -9 ` ps -ef |grep alien |grep -v grep |grep -v $$ |awk '{print \$2}'`; 
$NOHUP $ALIEN_INSTALL_DIR/etc/rc.d/init.d/aliend restart &
fi
}

SETBINLINKS()
{
if [ ! -d "$HOME/bin" ];
then
	mkdir -p $HOME/bin
	PRINTVERBOSE "$HOME/bin did not exist. Thus it was created."
fi
PRINTVERBOSE "Creating soft links to alien-token-init and aliensh in $HOME/bin"

if [ -f "$HOME/bin/alien-token-init" ]; then
	PRINTVERBOSE "Links already exist. Overwriting them."
	rm "$HOME/bin/alien-token-init" 
	rm "$HOME/bin/aliensh"
fi

cat >> $HOME/bin/alien-token-init << EOF
#! /bin/bash
(cd $ALIEN_INSTALL_DIR/api/bin && ./alien-token-init \$@)
EOF

chmod +x "$HOME/bin/alien-token-init"

ln -s "$ALIEN_INSTALL_DIR/api/bin/aliensh" "$HOME/bin/aliensh";
}

#################################################################################################
################################## Main #########################################################

# Arrays listing distributions, platforms and versions available for installation 
ALIEN_TYPES=(workernode vobox user all client)
ALIEN_PLATFORM_TYPES=(Linux Darwin)
ALIEN_ARCH_TYPES=(i686 i386 ia64 x86_64)
ALIEN_VERSIONS=(HEAD v2-18 v2-17 v2-16)

# Clearing the environment for the installation
ALIEN_VERSION=""
ALIEN_INSTALLER_PLATFORM=""

# Parse user given arguments
PARSEARGUMENTS $*

GETDOWNLOADCLIENT

# Determine the type of AliEn distribution to install
FINDTYPE

echo "   ###################### Automated AliEn $ALIEN_TYPE installer ##############################"

# Make sure that cache and installer.rc are cleaned
if [ "$ALIEN_INSTALLER_BATCH" = '' ]; then
	CHECKPREINSTALL
fi

# Set user defined installation paths otherwise use $HOME/alien
FINDUSERDIR

# Set user defined platform, otherwise use the current one
FINDPLATFORM

# Set user specified version, otherwise get the latest version from: http://alien.cern.ch/Releases
FINDVERSION

# Find the download server from: http://alien.cern.ch/BitServers
FINDRELEASES

# Check for the latest build, reinstall if old or non-existent
FINDCURRENTVERSION

# Installation directory prefixed with version and build numbers will be used
ALIEN_INSTALL_DIR="$ALIEN_INSTALL_DIR.$ALIEN_VERSION.$ALIEN_MINOR_VERSION"
ALIEN_INSTALL_LOCAL="alien.$ALIEN_VERSION.$ALIEN_MINOR_VERSION"

# If the installation directory already exists, then increment by "_new"
while [ -d "$ALIEN_INSTALL_DIR" ]; 
do
   PRINTVERBOSE "Another Installation directory detected: $ALIEN_INSTALL_DIR"
   ALIEN_INSTALL_DIR=${ALIEN_INSTALL_DIR}_new
   ALIEN_INSTALL_LOCAL=${ALIEN_INSTALL_LOCAL}_new
done

# Batch mode. If enabled skip the waiting and start the installation
if [ "$ALIEN_INSTALLER_BATCH" = '' ];
then 
  echo -n "   Waiting 10 seconds. Press 'Ctrl+c' to exit the installation"

  PRINTDOTS & 
  PROGRESS=$!
  
  sleep 10
  
  disown $PROGRESS >/dev/null 2>&1
  kill $PROGRESS >/dev/null 2>&1
  
  echo "Starting installation"
fi

# Remove the cache directory
#rm -rf $ALIEN_INSTALLER_HOME

# Define the url from where AliEn is downloaded
FILE=${ALIEN_BITS_URL}alien-$ALIEN_VERSION-$ALIEN_TYPE.tar.bz2

# Create the installation directory for AliEn
mkdir -p $ALIEN_INSTALL_DIR
cd $ALIEN_INSTALL_DIR

# Download the AliEn distribution tarball
if [ "$ALIEN_TORRENT" = "1" ];
then
      DOWNLOADTORRENT
else
      DOWNLOADNORMAL
fi

# Determine if this is a valid installation
if [ ! -f $ALIEN_INSTALL_DIR/share/alien/ALIEN_VERSION ]; then
    echo "   The version file doesn't exist"
    rm -rf  $ALIEN_INSTALL_DIR.failed
    mv $ALIEN_INSTALL_DIR $ALIEN_INSTALL_DIR.failed
    exit -2
fi

# Perform AliEn relocation
echo -n "   Relocating the $ALIEN_TYPE installation"

# Remove the old link
rm $ALIEN_USER_DIR >/dev/null 2>&1

# Link/Overwrite the link for the user directory to the installation directory
ln -s $ALIEN_INSTALL_LOCAL $ALIEN_USER_DIR

if [ "$ALIEN_INSTALLER_VERBOSE" != "1" ]; 
then
	PRINTDOTS & 
	PROGRESS=$!

	RELOCATE  > relocate.out 2>&1
	
	disown $PROGRESS 
	kill $PROGRESS >/dev/null 2>&1
	echo "Done"
else
		RELOCATE
fi

# Remove the distribution tarball
rm -rf alien.tar.gz

cat >> $ALIEN_INSTALL_DIR/.Environment <<EOF
ALIEN_ROOT=$ALIEN_INSTALL_DIR
ALIEN_PATH=\$ALIEN_ROOT/api/bin:\$ALIEN_ROOT/globus/bin
ALIEN_LD_LIBRARY_PATH=\$ALIEN_ROOT/api/lib:\$ALIEN_ROOT/globus/lib:\$ALIEN_ROOT/lib:\$ALIEN_ROOT/lib64:\$ALIEN_ROOT/lib/mysql
GLOBUS_LOCATION=\$ALIEN_ROOT/globus
X509_CERT_DIR=\$ALIEN_ROOT/globus/share/certificates
GAPI_LOCATION=\$ALIEN_ROOT/api
MYPROXY_LOCATION=\$ALIEN_ROOT/globus

EOF

# Restarting the services on demand
SERVICERESTART

# Add symbolic links to user home/bin directory
if [ "$ALIEN_INSTALLER_BATCH" = '' ]; then
	SETBINLINKS
fi

echo "   Installation finished!"
