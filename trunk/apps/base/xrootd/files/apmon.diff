--- work/xrootd-20060418-0404-r1/configure.ac	2006-06-06 11:35:29.000000000 +0200
+++ work/xrootd-20060418-0404-r1/configure.ac.new	2006-06-06 11:35:32.000000000 +0200
@@ -585,14 +585,13 @@
 AC_CHECK_LIB([rt],[aio_fsync],
              [AC_SUBST(LIBRT,[-lrt])])
 
-##  ---- DISABLED FOR NOW ----
 ## check for the MonALISA client cpp library
-##AC_CHECK_LIB([apmoncpp],[main],
-##             [:],
-##             [have_apmon=xno
-##              AC_MSG_WARN([libapmoncpp not found. I Will not build xrdmoncp!])
-##             ])
-##AM_CONDITIONAL(ENABLE_APMON, test x"$have_apmon" != xno)
+AC_CHECK_LIB([apmoncpp],[main],
+             [AC_DEFINE(HAVE_LIBAPMONCPP)],
+             [have_apmon=no
+              AC_MSG_WARN([libapmoncpp not found. ApMon support will be disabled!])
+             ])
+AM_CONDITIONAL(ENABLE_APMON, test x"$have_apmon" != xno)
 
 #################################################################
 # Checks for header files.
--- work/xrootd-20060418-0404-r1/src/XrdClient/Xrdcp.cc	2006-04-14 03:54:54.000000000 +0200
+++ work/xrootd-20060418-0404-r1/src/XrdClient/Xrdcp.cc.apmon	2006-06-06 11:27:34.000000000 +0200
@@ -19,6 +19,10 @@
 #include "XrdClient/XrdClientEnv.hh"
 #include "XrdSys/XrdSysPlatform.hh"
 
+#ifdef HAVE_LIBAPMONCPP
+#include "ApMon.h"
+#endif
+
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -80,6 +84,23 @@
 
 bool summary=false;            // print summary
 bool progbar=true;             // print progbar
+
+#ifdef HAVE_LIBAPMONCPP
+// ApMon Monitoring
+bool    use_apmon=true;
+ApMon  *apmon;
+int     apmon_nparams;
+char**  apmon_params;
+int*    apmon_types;
+char**  apmon_values;
+char*   job_id;
+char*   host_name;
+bool    is_src_remote;
+bool    is_dst_remote;
+double  src_IP;
+double  dst_IP;
+#endif
+
 char *srcopaque=0,
    *dstopaque=0;   // opaque info to be added to urls
 // Default open flags for opening a file (xrd)
@@ -132,6 +153,39 @@
    float abs_time=((float)((abs_stop_time.tv_sec - abs_start_time.tv_sec) *1000 +
 			   (abs_stop_time.tv_usec - abs_start_time.tv_usec) / 1000));
    CERR(("| %.02f %% [%.01f Mb/s]\r",100.0*bytesread/size,bytesread/abs_time/1000.0));
+
+#ifdef HAVE_LIBAPMONCPP
+   if(use_apmon){
+      try{
+         double total_size = size;
+         double moved_bytes = bytesread;
+         double read_bytes = is_src_remote ? bytesread : 0;
+         double written_bytes = is_dst_remote ? bytesread : 0;
+         double speed = bytesread/abs_time/1000.0;
+         double elapsed_time = abs_time;
+         double percent = 100.0*bytesread/size;
+
+         apmon_values[0] = (char *)&total_size;   // total size of this transfer, in bytes
+         apmon_values[1] = (char *)&moved_bytes;  // number of bytes moved so far
+         apmon_values[2] = (char *)&read_bytes;   // number of read bytes
+         apmon_values[3] = (char *)&written_bytes;// number of written bytes
+         apmon_values[4] = (char *)&speed;        // transfer speed, in Mb/s
+         apmon_values[5] = (char *)&elapsed_time; // elapsed time, in milliseconds, since start of this transfer
+         apmon_values[6] = (char *)&percent;      // percent of the completed transfer
+         apmon_values[7] = (char *)&src_IP;       // source IP, as a double value
+         apmon_values[8] = (char *)&dst_IP;       // destination IP, as a double value
+
+         if(job_id == NULL)
+            apmon->sendParameters("Other_XRD_Transfers", host_name, apmon_nparams,
+                                    apmon_params, apmon_types, apmon_values);
+         else
+            apmon->sendParameters("Job_XRD_Transfers", job_id, apmon_nparams,
+                                    apmon_params, apmon_types, apmon_values);
+      }catch(runtime_error &e){
+         cerr << "[ApMon] Error sending parameters" << endl;
+      }
+   }
+#endif
 }
 
 
@@ -669,8 +723,15 @@
 
 
 void PrintUsage() {
+#ifdef HAVE_LIBAPMONCPP
+   cerr << "usage: xrdcp <source> <dest> "
+     "[-d lvl] [-DSparmname stringvalue] ... [-DIparmname intvalue] [-s] [-ns] [-v] [-noapmon] [-OS<opaque info>] [-OD<opaque info>] [-force]" << endl;
+   cerr << " -noapmon:        don't send monitoring info using ApMon " << endl;
+#else
    cerr << "usage: xrdcp <source> <dest> "
      "[-d lvl] [-DSparmname stringvalue] ... [-DIparmname intvalue] [-s] [-ns] [-v] [-OS<opaque info>] [-OD<opaque info>] [-force]" << endl;
+#endif
+  
    cerr << " -d lvl :         debug level: 1 (low), 2 (medium), 3 (high)" << endl;
    cerr << " -s     :         silent mode, no summary output, no progress bar" << endl;
    cerr << " -np    :         no progress bar" << endl;
@@ -686,6 +747,102 @@
    cerr << "   intvalue     is an int to be assigned to an internal parameter" << endl;
 }
 
+#ifdef HAVE_LIBAPMONCPP
+void apmon_init(const char* src, const char* dst){
+    // If ApMon is enabled, initialize it
+    if(use_apmon){
+        char * apmon_config[1]={ getenv("APMON_CONFIG") };
+        if(apmon_config[0] == 0){
+            use_apmon=false;
+            cerr << "Disabling apmon monitoring since env variable APMON_CONFIG was not found" << endl;
+            return;
+        }
+        try{
+            if (!summary)
+                ApMon::setLogLevel("WARNING");
+            apmon = new ApMon(1, apmon_config);
+            apmon->setConfRecheck(false);
+            apmon->setJobMonitoring(false);
+            //apmon->setSysMonitoring(false);
+            //apmon->setGenMonitoring(false);
+        }catch(runtime_error &e){
+            cerr << "Error initializing ApMon: " << e.what() << endl;
+            cerr << "Disabling apmon." << endl;
+            use_apmon=false;
+            return;
+        }
+
+        is_src_remote = strstr(src, "root://") == src;
+        is_dst_remote = strstr(dst, "root://") == dst;
+
+        double local_IP = src_IP = dst_IP = 0;
+        host_name = getenv("HOSTNAME");
+        if(host_name == NULL)
+            host_name = getenv("HOST");
+        if(host_name == NULL){
+            cerr << "Error getting my hostname. Disabling ApMon." << endl;
+            use_apmon = false;
+            return;
+        }
+        struct hostent * he = gethostbyname(host_name);
+        if(he != NULL)
+            local_IP = ((struct in_addr *)he->h_addr)->s_addr;
+        char *host;
+        if(is_src_remote){
+            int len = 0;
+            for(const char *p = src+7; *p && *p != ':' && *p != '/' ; p++, len++);
+            host = (char *) calloc(len+1, 1);
+            strncpy(host, src+7, len);
+            he = gethostbyname(host);
+            free(host);
+            if(he != NULL)
+                src_IP = ((struct in_addr *)he->h_addr)->s_addr;
+            dst_IP = local_IP;
+        }
+
+        if(is_dst_remote){
+            int len = 0;
+            for(const char *p = dst+7; *p && *p != ':' && *p != '/'; p++, len++);
+            host = (char *) calloc(len+1, 1);
+            strncpy(host, dst+7, len);
+            he = gethostbyname(host);
+            free(host);
+            if(he != NULL)
+                dst_IP = ((struct in_addr *)he->h_addr)->s_addr;
+            src_IP = local_IP;
+        }
+
+        if (getenv("ALIEN_PROC_ID"))
+            job_id = getenv("ALIEN_PROC_ID");
+        else
+            if (getenv("GRID_JOB_ID"))
+                job_id = getenv("GRID_JOB_ID");
+
+        apmon_nparams = 9;
+        apmon_params = (char **)malloc(apmon_nparams * sizeof(char*));
+        apmon_values = (char **)malloc(apmon_nparams * sizeof(char*));
+        apmon_types = (int *)malloc(apmon_nparams * sizeof(int));
+        apmon_params[0] = "total_size";
+        apmon_types[0] = XDR_REAL64;
+        apmon_params[1] = "moved_bytes";
+        apmon_types[1] = XDR_REAL64;
+        apmon_params[2] = "read_bytes";
+        apmon_types[2] = XDR_REAL64;
+        apmon_params[3] = "written_bytes";
+        apmon_types[3] = XDR_REAL64;
+        apmon_params[4] = "speed";
+        apmon_types[4] = XDR_REAL64;
+        apmon_params[5] = "elapsed_time";
+        apmon_types[5] = XDR_REAL64;
+        apmon_params[6] = "percent";
+        apmon_types[6] = XDR_REAL64;
+        apmon_params[7] = "src_IP";
+        apmon_types[7] = XDR_REAL64;
+        apmon_params[8] = "dst_IP";
+        apmon_types[8] = XDR_REAL64;
+    }
+}
+#endif
 
 // Main program
 int main(int argc, char**argv) {
@@ -730,6 +887,13 @@
 	continue;
       }
 
+#ifdef HAVE_LIBAPMONCPP
+      if ( (strstr(argv[i], "-noapmon") == argv[i])){
+        use_apmon=false;
+        continue;
+      }
+#endif
+
       if ( (strstr(argv[i], "-v") == argv[i])) {
 	summary=true;
 	continue;
@@ -834,6 +998,10 @@
       exit(1);
    }
 
+#ifdef HAVE_LIBAPMONCPP
+   apmon_init(srcpath, destpath);
+#endif
+
    int retval = 0;
    while (!retval && wklst->GetCpJob(src, dest)) {
       Info(XrdClientDebug::kUSERDEBUG, "main", src << " --> " << dest);
--- work/xrootd-20060418-0404-r1/src/XrdClient/Makefile.am	2006-06-06 12:49:00.000000000 +0200
+++ work/xrootd-20060418-0404-r1/src/XrdClient/Makefile.am.new	2006-06-06 12:49:07.000000000 +0200
@@ -74,7 +74,11 @@
               -ldl
 
 xrdcp_SOURCES = Xrdcp.cc
+if ENABLE_APMON
+xrdcp_LDADD = $(clientlibs) -lapmoncpp
+else
 xrdcp_LDADD = $(clientlibs)
+endif
 
 xrd_SOURCES = XrdCommandLine.cc
 xrd_LDADD = $(clientlibs)
