#!/bin/sh
#############################################################################
# support - a front-end script to Simple Unix Package & PORTing tool
#############################################################################
#
# modification history
# $Log$
#
# SYNOPSIS
#
# DESCRIPTION
#
# AUTHOR:
# Predrag Buncic, e-mail: Predrag.Buncic@cern.ch
#
# CREATION DATE:
# 25-Jan-2005
#C<
###########################################################################
VERSION=0.01
###########################################################################
[ -f $HOME/.antidotrc ] && . $HOME/.antidotrc
###########################################################################
ANTIDOT_HOME=${ANTIDOT_HOME:=$HOME/.antidot}
ANTIDOT_URL=${ANTIDOT_URL:=rsync://alien.cern.ch:8873/cache} 
ANTIDOT_BINARY_UPDATE=${ANTIDOT_BINARY_UPDATE:=0}
ECHO=""
###########################################################################
AntiDotUpdate()
###########################################################################
{
  echo "ANTIDOT_HOME=$ANTIDOT_HOME" > $HOME/.antidotrc
  echo "ANTIDOT_URL=$ANTIDOT_URL" >> $HOME/.antidotrc
  echo "ANTIDOT_BINARY_UPDATE=$ANTIDOT_BINARY_UPDATE" >> $HOME/.antidotrc
}
###########################################################################
AntiDotMake()
###########################################################################
{
  cmd=$1; shift 1
  if [ $# -eq 0 ]
  then
    $ECHO make -C $ANTIDOT_HOME/meta/alien $cmd || exit 1
  else
    list=$*
    for pkg in $list
    do
      dirs=`find $ANTIDOT_HOME/apps -type d -mindepth 2 -maxdepth 2 -type d -path "$pkg"`
      for dir in $dirs 
      do
        if [ ! -d $dir ]
        then
          echo "No such package: $dir"
          exit 1
        fi
        $ECHO make -C $dir $cmd || exit 1
      done
    done
  fi
}

###########################################################################
###########################################################################

mkdir -p $ANTIDOT_HOME || exit 1

while [ $# -gt 0 ]
do
    case $1 in
        selfupdate|sync)
            shift 1
            case $ANTIDOT_URL in
              rsync://*)
                (cd $ANTIDOT_HOME && rsync -acz --progress $ANTIDOT_URL .)
                ;;
              cvs://*)
                (cd $ANTIDOT_HOME && cvs update -dP)
                ;;
              *)
                echo "Error: Wrong URL: "$ANTIDOT_URL
                exit 1
                ;;
            esac
            name=`echo $0 | sed 's%./%%'`
            exec $ANTIDOT_HOME/antidot --copy $0
           ;;
        --copy)
            shift 1
            cp -f $0 $1
	    exit
           ;;
        -u|--url)
            shift 1
	    ANTIDOT_URL=$1
            shift 1
           ;;
        -b|--binary)
            shift 1
	    ANTIDOT_BINARY_UPDATE=1
           ;;
        --pretend)
            shift 1
	    ECHO=echo
           ;;
        -p|--build-prefix)
            shift 1
	    ANTIDOT_HOME=$1
            shift 1
            mkdir -p $ANTIDOT_HOME || exit 1
           ;;
        update-all)
            shift 1
	    cd $ANTIDOT_HOME && make install
            exit
           ;;
        make)
            shift 1
            AntiDotMake $*
            exit
           ;;
        remove)
            shift 1
            AntiDotMake buildclean $*
            exit
           ;;
       purge)
            shift 1
            AntiDotMake clean $*
            exit
           ;;
        update|install)
           shift 1
           case $ANTIDOT_BINARY_UPDATE in
             1|true|TRUE|True|yes|Yes|YES|Y)
               AntiDotMake bininstall $*
               ;;
             *)
               AntiDotMake install $*
               ;;
           esac
           exit
           ;;
        configure)
            shift 1
            cd $ANTIDOT_HOME && autoconf && ./configure $*
            exit
           ;;
        -q)
           shift 1
	   QUIET=1
           ;;
        -v|--trace)
           shift 1
           set -vx
           ;;
        -V)
           print $VERSION
           exit
           ;; 
        -y)
           shift 1
           YES=1
           ;;
        --help|-help|-h)
            cat<<EOF

Usage: antidot [options] command [package...]

Common commmands:
  install    - install/update the named packages
  remove     - remove the named packages
  purge      - same as remove but also removes all configuration files
  update     - update the named packages
  sync,
  selfupdate - upgrade to the latest release
  update-all - update all installed packages
  configure  - rerun the configuration process
  list       - list available packages, optionally filtering by name,
  apropos    - list packages matching a search keyword
  describe   - display a detailed description of the named packages
  index      - force rebuild of package cache 
Options:
  -b, --binary       - use binary packages 
  -p, --build-prefix - installation directory
  -u, --url          - cache url         
  -h, --help         - display this help text
  -q, --quiet        -  be less verbose, opposite of --verbose
  -V, --version      - display version information
  -v, --verbose      - to be more verbose, opposite of --quiet
  -y, --yes           - assume default answer for all interactive questions

The underlying build system provides additional basic targets for each package:using antidot 'make' command:

Usage: antidit make <command> package1 ......         

 fetch
   This target downloads all files and patches needed to compile the package.
   Typically this is a single tarball, accompanied by occasional patch files.

 checksum
   Uses md5sum to ensure that the downloaded files match those with which the
   package maintainer worked.

 extract
   Makes sure that all of the necessary source files are available in a working
   directory. In some cases (such as when downloading a single C++ source file)
   this will simply copy files over.

 patch
   If the package has to be patched (either via third-party patches or package
   maintainer patches), this target will perform that step.

 configure
   Configures the package as specified in the Makefile. It will typically run
   the package's underlying configuration system (such as autoconf or Imake).

 build
   Performs the actual step of compilation after installing the dependencies.

 install
   Puts files in the proper locations and performs any necessary mop-up work.

These targets are named after their counterparts in the BSD Ports system and
behave in the same manner. If you want to install a package you have to enter
the package's or target's directory and to run "make install" or "make patch"
(just two examples). A later target includes all the previously listed ones.

Some additional useful targets which you usually don't require are:

 buildclean
   Clean up the working directory but don't delete downloaded packages. Run this if you installed missing dependencies and want to re-configure the package.

 clean
   Clean up the working directory. This also deletes downloaded packages! Either use "buildclean" instead or call "garchive" before to prevent new downloads.

 garchive
   Call "checksum" target and save downloaded files to GARCHIVEDIR directory. 

 showdeps
   Print a tree with the recursive dependencies of current package.

For every target exists a deep-foo variant which will also call it recursively
for all its dependencies, e.g. with "make deep-checksum" you can download all
required source tarballs and build it later (when you have no net connection).


EOF
            exit
           ;;
        list|apropos|index|describe)
            shift 1
            echo "Sorry, not implemented (yet)..."
            exit 1
           ;;
        *)
           shift 1
           ;;
    esac
done


AntiDotUpdate
