#!/bin/bash

trap 'INTERRUPT' 2 ERR

INTERRUPT()
{
STOPDOTS
STOPLOCK

CLEANINSTALLATION

if [ "$ERROR" = "" ]; then
	echo -e "\n   Installation cancelled. Exit code: -2"
	exit -2
else
	echo -e "\n   Installation cancelled. Exit code: $ERROR"
	exit "$ERROR"
fi
}

GETPROCESSLIST()
{
PROCESS_LIST=( "${PROCESS_LIST[@]}"  "$1" )
PROCESS_TEMP=( `ps -o pid --ppid $1 | grep -v PID` )

for current_pid in ${PROCESS_TEMP[*]}
do
	GETPROCESSLIST "$current_pid"
done
}

CLEANINSTALLATION()
{
if [ -f "$TMPFILE" ]; then
	rm -f "$TMPFILE"
fi

if [ -f "$LOCK" ]; then
	rm -f "$LOCK"
fi

MOVETOFAILED "$ALIEN_INSTALL_DIR"
}

MOVETOFAILED()
{
if [ ! "$1" = "" -a -d "$1" ]; then
	ALIEN_FAILED="$1.failed"
	while [ -d "$ALIEN_FAILED" ];
	do
		ALIEN_FAILED="$ALIEN_FAILED.failed"
	done

	PRINTVERBOSE "Moving $1 to $ALIEN_FAILED"
	mv "$1" "$ALIEN_FAILED"
fi
}

PARSEARGUMENTS()
{
while [ $# -gt 0 ]
	do
	case $1 in 
	-help|--help|-h)
		PRINTOPTIONS
		exit 0
	;;
	-help-more|--help-more)
		ALIEN_ADVANCED_OPTIONS=1
		PRINTOPTIONS
		exit 0
	;;
	-install-dir|--install-dir)
		shift 1
		ALIEN_USER_DIR=$1
	;;
	-restart|--restart)
		ALIEN_RESTART=1
	;;
	-type|--type)
		shift 1
		ALIEN_TYPE=$1
	;;
	-torrent|--torrent)
		ALIEN_TORRENT=1
	;;
	-notorrent|--notorrent)
		ALIEN_NO_TORRENT=1
	;;
	-version|--version)
		shift 1
		ALIEN_VERSION=$1
	;;
	-platform|--platform)
		shift 1
		ALIEN_INSTALLER_PLATFORM=$1
	;;
	-arch|--arch|--architecture|-architecture)
		shift 1
		ALIEN_INSTALLER_ARCH=$1
	;;
	-force|--force)
		ALIEN_FORCE_INSTALLATION=1
	;;
	-batch|--batch)
		ALIEN_INSTALLER_BATCH=1
		ALIEN_INSTALLER_VERBOSE=1
		ALIEN_TORRENT=1
	;;
	-verbose|--verbose)
		ALIEN_INSTALLER_VERBOSE=1
	;;
	*) echo "Invalid argument: '$*'. Please use: '$0 -help' for the list of available options"
		exit -1
	esac
	shift 1
done
}

PRINTOPTIONS()
{
echo "
Usage: $0 [arguments] Makes an automatic installation of the services
  -install-dir <path> 	Specify the installation directory (default is $HOME/alien)
  -type <type>       	Specify the AliEn type of installation (default is user) [ ${ALIEN_TYPES[*]} ]
  -help                 Print a list of options available
  -help-more		Print an advanced list of available options
"
if [ "$ALIEN_ADVANCED_OPTIONS" = 1 ]; then
  echo "Advanced options: Users are NOT recommended to use them unless they know what they are doing
  -restart           	Restart the services after the installation has finished
  -version <version> 	Install a specific version (default is v2-18) [ ${ALIEN_VERSIONS[*]} ]
  -platform <type>	Specify the platform to install (default is $(uname -s)) [ ${ALIEN_PLATFORM_TYPES[*]} ]
  -arch <type>		Specify the architecture to install (default is $(uname -m)) [${ALIEN_ARCH_TYPES[*]} ]
  -torrent		Perform installation through a torrent client
  -notorrent		Disable torrent installation. Standard download procedure will be used instead
  -force           	Force the installation of AliEn, even if the latest version is already installed
  -batch             	Perform a silent installation (extremely verbose and by default in torrent mode)
  -verbose		Print more detailed installation information (prints this)
"
fi
}

PRINTVERBOSE()
{
if [ "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then
	echo "    $1"
fi
}

PRINTDOTS()
{
while [ true ];
do
	echo -n "."
	sleep 1
done
}

STARTDOTS()
{
PRINTDOTS &
ALIEN_DOT_PID=$!
}

STOPDOTS()
{
if [ ! "$ALIEN_DOT_PID" = "" ]; then
	TMP_PROCESS=`ps -p "$ALIEN_DOT_PID" | grep "$ALIEN_INSTALLER_NAME"`
	if [ ! "$TMP_PROCESS" = "" ]; then
		disown 	$ALIEN_DOT_PID >/dev/null 2>&1
		kill 	$ALIEN_DOT_PID >/dev/null 2>&1
	fi
fi
}

GETDOWNLOADCLIENT()
{
which wget >/dev/null 2>&1
if [ $? -eq 0 ]; then
	ALIEN_DOWNLOAD_CLIENT=wget
	ALIEN_DOWNLOAD_OUTPUT="-O"
	if [ "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then
		ALIEN_DOWNLOAD_PREFIX="-U 'alien-installer v123 $$@$HOSTNAME:`pwd`'"
	else
		ALIEN_DOWNLOAD_PREFIX="-q"
	fi
else
	which curl >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		ALIEN_DOWNLOAD_CLIENT=curl
		ALIEN_DOWNLOAD_OUTPUT="-o"
		if [ "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then
			ALIEN_DOWNLOAD_PREFIX="-A 'alien-installer v123 $$@$HOSTNAME:`pwd`'"
		else
			ALIEN_DOWNLOAD_PREFIX="-s"
		fi
	else
		echo "   curl and wget were not found on your system."
		echo "   Installation cancelled!"
		INTERRUPT
	fi
fi
PRINTVERBOSE "Download client: $ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX <path> $ALIEN_DOWNLOAD_OUTPUT <file-output>"
}

FINDTYPE()
{
if [ "$ALIEN_TYPE" = "" ]; then
	ALIEN_TYPE=user
	PRINTVERBOSE "Default installation type: $ALIEN_TYPE"
else
	for index in ${ALIEN_TYPES[*]};
	do if [[ $index == $ALIEN_TYPE ]]; then
		PRINTVERBOSE "User specified valid installation type: $ALIEN_TYPE"
		ALIEN_TYPE_FOUND=1
	fi
	done
	
	if [ ! "$ALIEN_TYPE_FOUND" = 1 ]; then
		echo "   Invalid type of installation was specified"
		echo "   Please use one of the following installation types: ${ALIEN_TYPES[*]}"
		INTERRUPT
	fi
fi
}

CHECKPREINSTALL()
{
if [  -f $HOME/.alien/installer.rc ]; then
	echo -n "   Found $HOME/.alien/installer.rc. Delete the file? (default: Y - Highly recommended) [Y/n]"
	read alien_rc_delete
	case "$alien_rc_delete" in
	y|Y)
		rm $HOME/.alien/installer.rc
		echo "   File installer.rc removed"
	;;
	n|N)
		echo "   File not removed"
	;;
	"")
		rm $HOME/.alien/installer.rc
		echo "   File installer.rc removed"
	;;
	*) 
		echo "Invalid answer. Installation cancelled."
		INTERRUPT
	esac
fi

if [  -d $HOME/.alien/cache ]; then
	echo -n "   Found $HOME/.alien/cache/ directory. Delete the directory? (default: Y - Highly recommended) [Y/n]"
	read alien_cache_delete
	case "$alien_cache_delete" in
	y|Y)
		rm -r $HOME/.alien/cache
		echo "   Directory $HOME/.alien/cache removed"
	;;
	n|N)
		echo "   Directory not removed"
	;;
	"")
		rm -r $HOME/.alien/cache
		echo "   Directory $HOME/.alien/cache removed"
	;;
	*)
		echo "   Invalid answer. Installation cancelled."
		INTERRUPT
	esac
fi
}

SETINSTALLDIR()
{
ALIEN_USER_DIR=$(cd $ALIEN_USER_DIR && pwd)
ALIEN_INSTALL_DIR=$(cd $ALIEN_USER_DIR/../ && pwd)
ALIEN_INSTALL_DIR="$ALIEN_INSTALL_DIR/alien"
}

FINDUSERDIR()
{
ALIEN_INSTALLER_HOME=${ALIEN_INSTALLER_HOME=$HOME/.alien/cache}

if [ "$ALIEN_USER_DIR" = "" ]; then
	ALIEN_INSTALL_DIR=${ALIEN_INSTALL_DIR=$HOME/alien}
	ALIEN_USER_DIR=${ALIEN_INSTALL_DIR}
	echo "   Installing in the default directory: $ALIEN_USER_DIR"
	echo "   If you wish to install in a specific directory do: ./alien-installer -install-dir <path>"
else
	if [ ! "${ALIEN_USER_DIR:0:1}" = "/"  ]; then
		ALIEN_USER_DIR="$(pwd)/$ALIEN_USER_DIR"
	fi

	if [ ! -d "$ALIEN_USER_DIR" ]; then
		mkdir $ALIEN_USER_DIR
		if [ ! $? = 0 ]; then
			echo "   Failed to create user directory. Please check you have correct permissions."
			ERROR=-3
			INTERRUPT
		else
			PRINTVERBOSE "$ALIEN_USER_DIR created successfully"
		fi
		SETINSTALLDIR
		rm -rf "$ALIEN_USER_DIR"
	else
		if [ "$ALIEN_INSTALLER_BATCH" = "" ]; then
			echo -n "   $ALIEN_USER_DIR already exists. Do you wish to use it anyway? default: n [Y/n]"
			read alien_overwrite_install
			case "$alien_overwrite_install" in
			y|Y)
	    			PRINTVERBOSE "Reusing $ALIEN_USER_DIR"
	    			SETINSTALLDIR
			;;
			n|N)
	    			echo "   Please specify another installation directory."
				ERROR=-3
				INTERRUPT
			;;
			"")
	    		echo "   Please specify another installation directory."
			ERROR=-3
			INTERRUPT
	    		;;
			*) 
	    		echo "   Invalid answer. Installation cancelled."
			ERROR=-3
			INTERRUPT
			esac
		else
			PRINTVERBOSE "Reusing $ALIEN_USER_DIR"
			SETINSTALLDIR
		fi
	fi
	echo "   Installing in the user specified directory: $ALIEN_USER_DIR"
fi
PRINTVERBOSE "AliEn installation directory prefix: $ALIEN_INSTALL_DIR"
}

STARTLOCK()
{
while [ true ];
do
	echo "$$ $HOSTNAME $(date +%s) $ALIEN_INSTALL_DIR" >> "$LOCK"
	sleep 10
done
}

STOPLOCK()
{
if [ ! "$ALIEN_LOCK_PID" = "" ]; then
	TMP_PROCESS=`ps -p "$ALIEN_LOCK_PID" | grep "$ALIEN_INSTALLER_NAME"`
	if [ ! "$TMP_PROCESS" = "" ]; then
		disown 	$ALIEN_LOCK_PID >/dev/null 2>&1
		kill 	$ALIEN_LOCK_PID >/dev/null 2>&1
	fi
fi

if [ -f "$LOCK" ]; then
	rm -f "$LOCK"
fi
}

GETINSTALLTIME()
{
ALIEN_TIME_END=`tail -n 1 "$LOCK" | awk '{ print $3 }'`
ALIEN_TIME_START=`head -n 2 "$LOCK" | tail -n 1 | awk '{ print $3 }'`

ALIEN_TIME_ELAPSED=$(( $ALIEN_TIME_END - $ALIEN_TIME_START ))
}

GETLASTACTIVITY()
{
ALIEN_TIME_CURRENT=`date +%s`
ALIEN_TIME_LAST=`tail -n 1 "$LOCK" | awk '{ print $3 }'`

ALIEN_TIME_ACTIVITY=$(( $ALIEN_TIME_CURRENT - $ALIEN_TIME_LAST ))
}

CHECKLOCK()
{
if [ -f "$LOCK" ]; then

	ALIEN_HOSTNAME=`tail -n 1 "$LOCK" | awk '{ print $2 }'`
	PRINTVERBOSE "Hostname in $LOCK: $ALIEN_HOSTNAME"
	if [ "$ALIEN_HOSTNAME" = "$HOSTNAME" ]; then

		ALIEN_PROCESS=`tail -n 1 "$LOCK" | awk '{ print $1 }' `
		ALIEN_PROCESS_EXISTS=`ps -p $ALIEN_PROCESS | grep "$ALIEN_INSTALLER_NAME"`
		if [ "$ALIEN_PROCESS_EXISTS" = "" ]; then
				echo "   Existing installation no longer active. Cleaning previous installation"
				CLEANINSTALLATION
		else
			GETINSTALLTIME
			GETLASTACTIVITY
			if [ $ALIEN_TIME_ELAPSED -gt 7200 -o $ALIEN_TIME_ACTIVITY -gt 86400 ]; then
				echo "   Previous installation is taking: $ALIEN_TIME_ELAPSED seconds; Last activity: $ALIEN_TIME_ACTIVITY seconds ago"
				echo "   Cleaning previous installation"
				PROCESS_LIST=""

				GETPROCESSLIST "$ALIEN_PROCESS"
				PRINTVERBOSE "Previous installation processes list: ${PROCESS_LIST[@]}"
				kill ${PROCESS_LIST[@]}

				ALIEN_PREVIOUS_INSTALL=`tail -n 1 "$LOCK" | awk '{ print $4 }'`
				MOVETOFAILED "$ALIEN_PREVIOUS_INSTALL"
				CLEANINSTALLATION
			else
				echo "   Another AliEn installation may already be running for $ALIEN_USER_DIR"
				echo "   Installation cancelled. Exit code: 0"
				exit 0
			fi
		fi
	else
		GETINSTALLTIME
		GETLASTACTIVITY
		echo "   Hostname $ALIEN_HOSTNAME is already running AliEn installation in $ALIEN_USER_DIR"
		echo "   Installation is taking: $ALIEN_TIME_ELAPSED seconds; Last activity: $ALIEN_TIME_ACTIVITY seconds ago"
		echo "   Installation cancelled! Exit code: 0"
		exit 0
	fi
fi

echo "AliEn $ALIEN_TYPE installation for: $ALIEN_USER_DIR using $ALIEN_INSTALLER_NAME" >> "$LOCK"
echo "$$ $HOSTNAME $(date +%s) $ALIEN_INSTALL_DIR" >> "$LOCK"

STARTLOCK &
ALIEN_LOCK_PID=$!
PRINTVERBOSE "Lock initiated on process: $ALIEN_LOCK_PID for $ALIEN_USER_DIR installation of AliEn $ALIEN_TYPE"
}

FINDPLATFORM()
{
if [ "$ALIEN_INSTALLER_PLATFORM" = "" ]; then
	ALIEN_INSTALLER_PLATFORM=$(uname -s)
fi

if [ "$ALIEN_INSTALLER_ARCH" = "" ]; then
	ALIEN_INSTALLER_ARCH=$(uname -m)
	if [ "$ALIEN_INSTALLER_PLATFORM" = "Darwin" ]; then
		sysctl machdep.cpu.extfeatures | grep "64" > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			ALIEN_INSTALLER_ARCH=x86_64
		else
			ALIEN_INSTALLER_ARCH=i686
		fi
	fi
fi

PRINTVERBOSE "Platform determined as: $ALIEN_INSTALLER_PLATFORM"
PRINTVERBOSE "Architecture determined as: $ALIEN_INSTALLER_ARCH"

if [ "$ALIEN_INSTALLER_PLATFORM" = "Linux" ]; then
		case "$ALIEN_INSTALLER_ARCH" in
			i686) ALIEN_INSTALLER_PLATFORM=i686-pc-linux-gnu ;;
			ia64) ALIEN_INSTALLER_PLATFORM=ia64-unknown-linux-gnu ;;
			x86_64) ALIEN_INSTALLER_PLATFORM=x86_64-unknown-linux-gnu ;;
			*)
			echo "   Invalid architecture was specified"
			echo "   Please use one of the following available architectures: ${ALIEN_ARCH_TYPES[*]}"
			INTERRUPT ;;
		esac

elif [ "$ALIEN_INSTALLER_PLATFORM" = "Darwin" ]; then
		case "$ALIEN_INSTALLER_ARCH" in
			i386) ALIEN_INSTALLER_PLATFORM=i686-apple-darwin8.6.1 ;;
			i686) ALIEN_INSTALLER_PLATFORM=i686-apple-darwin8.6.1 ;;
			x86_64) ALIEN_INSTALLER_PLATFORM=x86_64-apple-darwin8.6.1 ;;
			*)
			echo "   Invalid platform was specified"
			echo "   Please use one of the following available platforms: ${ALIEN_PLATFORM_TYPES[*]}"
			INTERRUPT
		esac
fi

echo "   Platform set as: $ALIEN_INSTALLER_PLATFORM"
}

FINDVERSION()
{
if [ "$ALIEN_VERSION" = '' ]; then
	releases="http://alienbuild.cern.ch:8888/Releases"
	PRINTVERBOSE "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $releases $ALIEN_DOWNLOAD_OUTPUT $TMPFILE"
	$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" $releases "$ALIEN_DOWNLOAD_OUTPUT" $TMPFILE

	if  [ $? != 0 ]; then
		echo "   Error getting file $releases"
		ERROR=-2
		INTERRUPT
	fi

	ALIEN_VERSION=`grep 'Stable' $TMPFILE | head -n 1 | awk '{print $5'}`
	rm $TMPFILE

	if [ "$ALIEN_VERSION" = "" ]; then
		echo "   Error getting AliEn version from $releases"
		ERROR=-2
		INTERRUPT
	fi
else
	for index in ${ALIEN_VERSIONS[*]};
	do
	    if [[ $index == $ALIEN_VERSION ]]; then
		PRINTVERBOSE "User specified a valid version: $ALIEN_VERSION"
		ALIEN_VERSION_FOUND=1
	    fi
	done
	
	if [ ! "$ALIEN_VERSION_FOUND" = 1 ]; then
		echo "   Invalid version was specified"
		echo "   Please use one of the following available versions: ${ALIEN_VERSIONS[*]}"
		INTERRUPT
	fi
fi

PRINTVERBOSE "Installing version: $ALIEN_VERSION"
}

FINDRELEASES()
{
releases="http://alienbuild.cern.ch:8888/BitServers"
PRINTVERBOSE "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $releases $ALIEN_DOWNLOAD_OUTPUT $TMPFILE"
$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" $releases "$ALIEN_DOWNLOAD_OUTPUT" $TMPFILE

if  [ $? != 0 ]; then
	echo "   Error getting file $releases"
	ERROR=-2
	INTERRUPT
fi

ALIEN_BITS_URL=`grep $ALIEN_INSTALLER_PLATFORM  $TMPFILE | awk '{print $3'}`
ALIEN_BITS_URL="$ALIEN_BITS_URL/$ALIEN_INSTALLER_PLATFORM/$ALIEN_VERSION/download/"

if [ "$ALIEN_BITS_URL" = "" ]; then
	echo "   Error getting bits url $releases"
	cat $TMPFILE
	rm $TMPFILE
	ERROR=-2
	INTERRUPT
fi

rm -f $TMPFILE
}

FINDCURRENTVERSION()
{
PRINTVERBOSE "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWLOAD_PREFIX $ALIEN_BITS_URL/../../../../CompiledReleases $ALIEN_DOWNLOAD_OUTPUT CompiledReleases"
$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" "$ALIEN_BITS_URL/../../../../CompiledReleases" "$ALIEN_DOWNLOAD_OUTPUT" CompiledReleases

if [ $? != 0 ]; then
	echo "    Error getting file $ALIEN_BITS_URL/../../../../CompiledReleases"
	ERROR=-2
	INTERRUPT
fi

ALIEN_MINOR_VERSION=`cat CompiledReleases |grep $ALIEN_VERSION| awk  '{print \$3}'`

rm CompiledReleases

if [ -d "$ALIEN_USER_DIR" ]; then
        ALIEN_EXISTING_VERSION=`ls -all "$ALIEN_USER_DIR" | awk '{ print $NF }' | grep new`
        if [ "$ALIEN_EXISTING_VERSION" = "" ]; then
                ALIEN_EXISTING_VERSION=`ls -all "$ALIEN_USER_DIR" | awk '{ print substr($NF,index($NF,".")+1) }' `
        else
                ALIEN_EXISTING_VERSION=`ls -all "$ALIEN_USER_DIR" | awk '{ print substr($NF,index($NF,".")+1,index($NF,"_")-index($NF,".")-1) }'`
        fi
fi

if [ ! "$ALIEN_EXISTING_VERSION" = "" ]; then
	echo "   Checking the version to be installed (if it is newer than $ALIEN_EXISTING_VERSION)"
	if [ "$ALIEN_EXISTING_VERSION" = "$ALIEN_VERSION.$ALIEN_MINOR_VERSION" ]; then
		echo "   You have the latest version installed ($ALIEN_EXISTING_VERSION). No installation is necessary"
		ERROR=0
		INTERRUPT $ERROR
	fi
else
	PRINTVERBOSE "No existing version was found for $ALIEN_USER_DIR. Installing new version"
fi

PRINTVERBOSE "Ready to install $ALIEN_VERSION.$ALIEN_MINOR_VERSION"
}

DOWNLOADNORMAL()
{
if [ ! "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then
	echo -n "   Downloading $ALIEN_TYPE distribution"
	STARTDOTS
fi

PRINTVERBOSE "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $FILE $ALIEN_DOWNLOAD_OUTPUT alien.tar.gz"
$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" $FILE "$ALIEN_DOWNLOAD_OUTPUT" alien.tar.gz

if [ ! "$ALIEN_INSTALLER_VERBOSE" = 1 ]; then
	STOPDOTS
	echo "Done"
fi

if [ "$?" != 0 ]; then
	echo "   Error getting $FILE!"
	rm -rf  $ALIEN_INSTALL_DIR
	ERROR=-2
	INTERRUPT
fi

echo -n "   Extracting the files"

STARTDOTS

tar jxf alien.tar.gz

STOPDOTS
echo "Done"

if [ ! -f $ALIEN_INSTALL_DIR/share/alien/ALIEN_VERSION ]; then
	echo "   The version file doesn't exist"
	ERROR=-2
	INTERRUPT
fi
}

DOWNLOADTORRENT()
{
TCLIENT="torrent_client_$ALIEN_INSTALLER_ARCH.tar.bz2"
WWWROOT="http://alitorrent.cern.ch"

PRINTVERBOSE "$ALIEN_DOWNLOAD_CLIENT $ALIEN_DOWNLOAD_PREFIX $WWWROOT/torrent_client/$TCLIENT $ALIEN_DOWNLOAD_OUTPUT $TCLIENT"

# Download the torrent client
$ALIEN_DOWNLOAD_CLIENT "$ALIEN_DOWNLOAD_PREFIX" "$WWWROOT/torrent_client/$TCLIENT" "$ALIEN_DOWNLOAD_OUTPUT" $TCLIENT || INTERRUPT

bzip2 -c -d "$TCLIENT" | tar -x || exit 2
echo "   Getting the torrent"

FULLNAME="alien-$ALIEN_VERSION-$ALIEN_TYPE-$ALIEN_INSTALLER_ARCH.tar.bz2"
TFILE="$WWWROOT/torrents/$FULLNAME.torrent"

torrent_client_$ALIEN_INSTALLER_ARCH/download "$TFILE" -d torrent_source || INTERRUPT

PRINTVERBOSE "   Seeding the torrent"

torrent_client_$ALIEN_INSTALLER_ARCH/seed "$TFILE" -d torrent_source

if [ "$?" != 0 ]; then
	echo "Error getting $FILE!"
	rm -rf  $ALIEN_INSTALL_DIR
	ERROR=-2
	INTERRUPT
fi

echo -n "   Extracting the files"

STARTDOTS

tar jxf torrent_source/*/*.tar.bz2

STOPDOTS
echo "Done"

if [ ! -f $ALIEN_INSTALL_DIR/share/alien/ALIEN_VERSION ]; then
	echo "   The version file was not found. Falling back to normal download"
	PRINTVERBOSE "Cleaning the installation folder: $ALIEN_INSTALL_DIR"
	rm -rf $ALIEN_INSTALL_DIR/*
	DOWNLOADNORMAL
fi
}

RELOCATE()
{
prefix=$ALIEN_USER_DIR
build_prefix=/opt/alien

# Relocate if the installation directory is not /opt/alien
if [ "$prefix" != "$build_prefix" ]; 
then
	if [ "$ALIEN_TYPE" != "user" ]; then

		PRINTVERBOSE "Relocating perl"
		config=`find $prefix/lib/perl5 -name Config.pm -exec grep -l "This file was created by configpm" {} \;`
		if [ "$config" = "" ] ; then
			PRINTVERBOSE "Couldn't find Config.pm in $prefix/lib/perl5!"
			ERROR=-2
			INTERRUPT
		fi
		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix%$prefix%sg; s%$build_prefix %$prefix %sg " $config
		config=`find $prefix/lib/perl5 -path "*/CORE/config.h"`

		if [ "$config" = "" ] ; then
			PRINTVERBOSE "Couldn't find CORE/config.h in $prefix/lib/perl5!"
			ERROR=-2
			INTERRUPT
		fi

		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix %$prefix %sg; s%\"$build_prefix\"%\"$prefix\"%sg; " $config
		for file in `find $prefix/lib/perl5 -name .packlist`
		do
			perl -pi -e "s%$build_prefix/%$prefix/%g" $file
		done

		PRINTVERBOSE "Relocating globus"
		if [ -f $prefix/globus/setup/globus/setup-globus-common ]; then
			env GLOBUS_LOCATION=$prefix/globus GPT_LOCATION=$prefix/globus PERL5LIB="$prefix/globus/lib/perl5:$prefix/lib/perl5" $prefix/bin/perl $prefix/globus/setup/globus/setup-globus-common.pl
		fi

		PRINTVERBOSE "Relocating alien-perl"
		if [ -f $prefix/bin/alien-perl ]; then
			$prefix/bin/alien-perl --bootstrap --prefix $prefix
		fi
	fi

	for p in curl-config gpg-error-config libgcrypt-config libgnutls-config libgnutls-extra-config uuid-config xml2-config freetype-config pkg-config
	do
	if [ -f $prefix/bin/$p ] ; then
		PRINTVERBOSE "Relocating $p"
		perl -pi -e "s%$build_prefix/%$prefix/%sg; s%$build_prefix'%$prefix'%sg; s%$build_prefix%$prefix%sg; s%$build_prefix %$prefix %sg " $prefix/bin/$p
	fi
	done

	PRINTVERBOSE "Relocating gapi"
	(cd $prefix/api/bin; ./alien_apiservice-bootstrap)
	PRINTVERBOSE "Relocation for gapi complete"
fi
}

SERVICERESTART()
{
if [ "$ALIEN_RESTART" = 1 ]; then
	NOHUP=`which nohup 2> /dev/null`
	echo "   Let's restart the services (with $NOHUP)"
	echo "   This very first time, we have to kill everything"
#    (cd; sleep 15; kill ` ps -ef |grep alien |grep -v grep |grep -v $$ |awk '{print \$2}'`;kill -9 ` ps -ef |grep alien |grep -v grep |grep -v $$ |awk '{print \$2}'`; 
($NOHUP $ALIEN_INSTALL_DIR/etc/rc.d/init.d/aliend restart &)
fi
}

SETBINLINKS()
{
if [ ! -d "$HOME/bin" ]; then
	mkdir -p $HOME/bin
	PRINTVERBOSE "$HOME/bin did not exist. Thus it was created."
fi

PRINTVERBOSE "Creating soft links to alien-token-init and aliensh in $HOME/bin"

if [ -f "$HOME/bin/alien-token-init" ]; then
	PRINTVERBOSE "Links already exist. Overwriting them."
	rm "$HOME/bin/alien-token-init"
	rm "$HOME/bin/aliensh"
fi

cat >> $HOME/bin/alien-token-init << EOF
#! /bin/bash
(cd $ALIEN_INSTALL_DIR/api/bin && ./alien-token-init \$@)
EOF

chmod +x "$HOME/bin/alien-token-init"

ln -s "$ALIEN_INSTALL_DIR/api/bin/aliensh" "$HOME/bin/aliensh";
}

#################################################################################################
################################## Main #########################################################

# Arrays listing distributions, platforms and versions available for installation 
ALIEN_TYPES=(workernode vobox user all client)
ALIEN_PLATFORM_TYPES=(Linux Darwin)
ALIEN_ARCH_TYPES=(i686 i386 ia64 x86_64)
ALIEN_VERSIONS=(HEAD v2-18 v2-17 v2-16)

# Designating the names and locations of temporary files
ALIEN_INSTALLER_NAME=`echo "$0" | awk '{ print substr($1, 3) }'`
TMPFILE=/tmp/."$ALIEN_INSTALLER_NAME".$$

# Clearing the environment for the installation
ALIEN_VERSION=""
ALIEN_INSTALLER_PLATFORM=""

# Parse user given arguments
PARSEARGUMENTS $*

# -notorrent overrides any existing torrent enabling options
if [ "$ALIEN_NO_TORRENT" = "1" ]; then
	ALIEN_TORRENT=0
fi

# Either curl or wget will be used for downloads
GETDOWNLOADCLIENT

# Determine the type of AliEn distribution to install
FINDTYPE

echo "   ###################### Automated AliEn $ALIEN_TYPE installer ##############################"

# Make sure that cache and installer.rc are cleaned
if [ "$ALIEN_INSTALLER_BATCH" = '' ]; then
	CHECKPREINSTALL
fi

# Set user defined installation paths otherwise use $HOME/alien
FINDUSERDIR

LOCK="$ALIEN_USER_DIR".lock
# Initiate/Check the lock on the current installation
CHECKLOCK

# Set user defined platform, otherwise use the current one
FINDPLATFORM

# Set user specified version, otherwise get the latest version
FINDVERSION

# Find the download server
FINDRELEASES

# Check for the latest build, reinstall if old or non-existent
FINDCURRENTVERSION

# Installation directory prefixed with version and build numbers will be used
ALIEN_INSTALL_DIR="$ALIEN_INSTALL_DIR.$ALIEN_VERSION.$ALIEN_MINOR_VERSION"
ALIEN_INSTALL_LOCAL="alien.$ALIEN_VERSION.$ALIEN_MINOR_VERSION"

# If the installation directory already exists, then increment by "_new"
while [ -d "$ALIEN_INSTALL_DIR" ];
do
	PRINTVERBOSE "Another Installation directory detected: $ALIEN_INSTALL_DIR"
	ALIEN_INSTALL_DIR=${ALIEN_INSTALL_DIR}_new
	ALIEN_INSTALL_LOCAL=${ALIEN_INSTALL_LOCAL}_new
done

# Batch mode. If enabled skip the waiting and start the installation
if [ "$ALIEN_INSTALLER_BATCH" = '' ]; then
	echo -n "   Waiting 10 seconds. Press 'Ctrl+c' to exit the installation"
	STARTDOTS
	sleep 10
	STOPDOTS
	echo "Done"
fi

# Define the url from where AliEn is downloaded
FILE=${ALIEN_BITS_URL}alien-$ALIEN_VERSION-$ALIEN_TYPE.tar.bz2

# Create the installation directory for AliEn
mkdir -p $ALIEN_INSTALL_DIR
if [ ! $? = 0 ]; then
	echo "   Failed to create the installation directory. Please check you have correct permissions."
	ERROR=-2
	INTERRUPT
else
	PRINTVERBOSE "$ALIEN_INSTALL_DIR created successfully"
fi

cd $ALIEN_INSTALL_DIR

# Download the AliEn distribution tarball
if [ "$ALIEN_TORRENT" = "1" ]; then
	DOWNLOADTORRENT
else
	DOWNLOADNORMAL
fi

PRINTVERBOSE "Testing $ALIEN_INSTALL_DIR/bin/perl"
if [ -f $ALIEN_INSTALL_DIR/bin/perl ]; then
		test_perl=$ALIEN_INSTALL_DIR/bin/perl
		test_build=`$test_perl -I $ALIEN_INSTALL_DIR/lib/perl5 -MConfig -e 'print $Config{prefix}'`
		PRINTVERBOSE "test_build: $test_build"
		if [ -z $test_build ]; then
			rm -rf  $ALIEN_INSTALL_DIR.failed
			mv $ALIEN_INSTALL_DIR $ALIEN_INSTALL_DIR.failed
			echo "AliEn perl is incompatible with the system"
			ERROR=-2
			INTERRUPT
		fi
else
	PRINTVERBOSE "AliEn perl was not found. Installation without perl assumed"
fi

# Perform AliEn relocation
echo -n "   Relocating the $ALIEN_TYPE installation"

# Remove the old link if it already exists
if [ -d "$ALIEN_USER_DIR" ]; then
	rm "$ALIEN_USER_DIR"
fi

# Link/Overwrite the link for the user directory to the installation directory
ln -s $ALIEN_INSTALL_LOCAL $ALIEN_USER_DIR

if [ "$ALIEN_INSTALLER_VERBOSE" != "1" ]; then
	STARTDOTS
	RELOCATE  > relocate.out 2>&1
	STOPDOTS
	echo "Done"
else
	RELOCATE
fi

# Remove the distribution tarball
rm -rf alien.tar.gz

cat >> $ALIEN_INSTALL_DIR/.Environment <<EOF
ALIEN_ROOT=$ALIEN_INSTALL_DIR
ALIEN_PATH=\$ALIEN_ROOT/api/bin:\$ALIEN_ROOT/globus/bin
ALIEN_LD_LIBRARY_PATH=\$ALIEN_ROOT/api/lib:\$ALIEN_ROOT/globus/lib:\$ALIEN_ROOT/lib:\$ALIEN_ROOT/lib64:\$ALIEN_ROOT/lib/mysql
GLOBUS_LOCATION=\$ALIEN_ROOT/globus
X509_CERT_DIR=\$ALIEN_ROOT/globus/share/certificates
GAPI_LOCATION=\$ALIEN_ROOT/api
MYPROXY_LOCATION=\$ALIEN_ROOT/globus

EOF

# Restart the services on demand
SERVICERESTART

# Add symbolic links in user home/bin directory
if [ "$ALIEN_INSTALLER_BATCH" = "" ]; then
	SETBINLINKS
fi

GETINSTALLTIME
PRINTVERBOSE "AliEn $ALIEN_TYPE installation took $ALIEN_TIME_ELAPSED seconds"

STOPLOCK

echo "   Installation finished!"
